
3LedRtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000e8c  00000f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000644  0080007a  0080007a  00000f3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002810  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b84  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018bc  00000000  00000000  0000458c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  00005e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f2f  00000000  00000000  00006514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002238  00000000  00000000  00007443  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000967b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3b       	cpi	r26, 0xBE	; 190
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  8a:	0c 94 44 07 	jmp	0xe88	; 0xe88 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Task1_Func>:
	//xLastWakeTime = xTaskGetTickCount();

	while(1)
	{

		PORTC ^= (1u<<3);
  92:	95 b3       	in	r25, 0x15	; 21
  94:	88 e0       	ldi	r24, 0x08	; 8
  96:	89 27       	eor	r24, r25
  98:	85 bb       	out	0x15, r24	; 21
		vTaskDelay(100);
  9a:	84 e6       	ldi	r24, 0x64	; 100
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <vTaskDelay>
  a2:	f7 cf       	rjmp	.-18     	; 0x92 <Task1_Func>

000000a4 <Task2_Func>:
void Task2_Func(void *parameters)
{
	while(1)
	{

		PORTC ^= (1u<<5);
  a4:	95 b3       	in	r25, 0x15	; 21
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	89 27       	eor	r24, r25
  aa:	85 bb       	out	0x15, r24	; 21
		vTaskDelay(30);
  ac:	8e e1       	ldi	r24, 0x1E	; 30
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <vTaskDelay>
  b4:	f7 cf       	rjmp	.-18     	; 0xa4 <Task2_Func>

000000b6 <Task3_Func>:
void Task3_Func(void *parameters)
{
	while(1)
	{

		PORTC ^= (1u<<1);
  b6:	95 b3       	in	r25, 0x15	; 21
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	89 27       	eor	r24, r25
  bc:	85 bb       	out	0x15, r24	; 21
		vTaskDelay(50);
  be:	82 e3       	ldi	r24, 0x32	; 50
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 da 06 	call	0xdb4	; 0xdb4 <vTaskDelay>
  c6:	f7 cf       	rjmp	.-18     	; 0xb6 <Task3_Func>

000000c8 <main>:
TaskHandle_t task3ptr;


int main(void)
{
	DDRC  = 0xFF;	// Configure all PORTC pins as output pins
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20

	xTaskCreate(Task1_Func,"first",configMINIMAL_STACK_SIZE,NULL,1,&task1ptr);
  cc:	0f 2e       	mov	r0, r31
  ce:	fc eb       	ldi	r31, 0xBC	; 188
  d0:	ef 2e       	mov	r14, r31
  d2:	f6 e0       	ldi	r31, 0x06	; 6
  d4:	ff 2e       	mov	r15, r31
  d6:	f0 2d       	mov	r31, r0
  d8:	01 e0       	ldi	r16, 0x01	; 1
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	45 e5       	ldi	r20, 0x55	; 85
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	61 e6       	ldi	r22, 0x61	; 97
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	89 e4       	ldi	r24, 0x49	; 73
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 65 04 	call	0x8ca	; 0x8ca <xTaskCreate>
	xTaskCreate(Task2_Func,"second",configMINIMAL_STACK_SIZE,NULL,1,&task2ptr);
  ee:	0f 2e       	mov	r0, r31
  f0:	fa eb       	ldi	r31, 0xBA	; 186
  f2:	ef 2e       	mov	r14, r31
  f4:	f6 e0       	ldi	r31, 0x06	; 6
  f6:	ff 2e       	mov	r15, r31
  f8:	f0 2d       	mov	r31, r0
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	45 e5       	ldi	r20, 0x55	; 85
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	67 e6       	ldi	r22, 0x67	; 103
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	82 e5       	ldi	r24, 0x52	; 82
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 65 04 	call	0x8ca	; 0x8ca <xTaskCreate>
	xTaskCreate(Task3_Func,"third",configMINIMAL_STACK_SIZE,NULL,1,&task3ptr);	
 10e:	0f 2e       	mov	r0, r31
 110:	f8 eb       	ldi	r31, 0xB8	; 184
 112:	ef 2e       	mov	r14, r31
 114:	f6 e0       	ldi	r31, 0x06	; 6
 116:	ff 2e       	mov	r15, r31
 118:	f0 2d       	mov	r31, r0
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	45 e5       	ldi	r20, 0x55	; 85
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	6e e6       	ldi	r22, 0x6E	; 110
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	8b e5       	ldi	r24, 0x5B	; 91
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 65 04 	call	0x8ca	; 0x8ca <xTaskCreate>

	vTaskStartScheduler();
 12e:	0e 94 b9 04 	call	0x972	; 0x972 <vTaskStartScheduler>
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x6a>

00000134 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
 134:	fc 01       	movw	r30, r24
 136:	03 96       	adiw	r24, 0x03	; 3
 138:	92 83       	std	Z+2, r25	; 0x02
 13a:	81 83       	std	Z+1, r24	; 0x01
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	3f ef       	ldi	r19, 0xFF	; 255
 140:	34 83       	std	Z+4, r19	; 0x04
 142:	23 83       	std	Z+3, r18	; 0x03
 144:	96 83       	std	Z+6, r25	; 0x06
 146:	85 83       	std	Z+5, r24	; 0x05
 148:	90 87       	std	Z+8, r25	; 0x08
 14a:	87 83       	std	Z+7, r24	; 0x07
 14c:	10 82       	st	Z, r1
 14e:	08 95       	ret

00000150 <vListInitialiseItem>:
 150:	fc 01       	movw	r30, r24
 152:	11 86       	std	Z+9, r1	; 0x09
 154:	10 86       	std	Z+8, r1	; 0x08
 156:	08 95       	ret

00000158 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 15e:	48 81       	ld	r20, Y
 160:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 162:	4f 3f       	cpi	r20, 0xFF	; 255
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	52 07       	cpc	r21, r18
 168:	21 f4       	brne	.+8      	; 0x172 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 16a:	fc 01       	movw	r30, r24
 16c:	a7 81       	ldd	r26, Z+7	; 0x07
 16e:	b0 85       	ldd	r27, Z+8	; 0x08
 170:	0d c0       	rjmp	.+26     	; 0x18c <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 172:	dc 01       	movw	r26, r24
 174:	13 96       	adiw	r26, 0x03	; 3
 176:	01 c0       	rjmp	.+2      	; 0x17a <vListInsert+0x22>
 178:	df 01       	movw	r26, r30
 17a:	12 96       	adiw	r26, 0x02	; 2
 17c:	ed 91       	ld	r30, X+
 17e:	fc 91       	ld	r31, X
 180:	13 97       	sbiw	r26, 0x03	; 3
 182:	20 81       	ld	r18, Z
 184:	31 81       	ldd	r19, Z+1	; 0x01
 186:	42 17       	cp	r20, r18
 188:	53 07       	cpc	r21, r19
 18a:	b0 f7       	brcc	.-20     	; 0x178 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 18c:	12 96       	adiw	r26, 0x02	; 2
 18e:	ed 91       	ld	r30, X+
 190:	fc 91       	ld	r31, X
 192:	13 97       	sbiw	r26, 0x03	; 3
 194:	fb 83       	std	Y+3, r31	; 0x03
 196:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 198:	d5 83       	std	Z+5, r29	; 0x05
 19a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
 19c:	bd 83       	std	Y+5, r27	; 0x05
 19e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
 1a0:	13 96       	adiw	r26, 0x03	; 3
 1a2:	dc 93       	st	X, r29
 1a4:	ce 93       	st	-X, r28
 1a6:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 1a8:	99 87       	std	Y+9, r25	; 0x09
 1aa:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 81       	ld	r18, Z
 1b0:	2f 5f       	subi	r18, 0xFF	; 255
 1b2:	20 83       	st	Z, r18
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 1c0:	a0 85       	ldd	r26, Z+8	; 0x08
 1c2:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1c4:	c2 81       	ldd	r28, Z+2	; 0x02
 1c6:	d3 81       	ldd	r29, Z+3	; 0x03
 1c8:	84 81       	ldd	r24, Z+4	; 0x04
 1ca:	95 81       	ldd	r25, Z+5	; 0x05
 1cc:	9d 83       	std	Y+5, r25	; 0x05
 1ce:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 1d0:	c4 81       	ldd	r28, Z+4	; 0x04
 1d2:	d5 81       	ldd	r29, Z+5	; 0x05
 1d4:	82 81       	ldd	r24, Z+2	; 0x02
 1d6:	93 81       	ldd	r25, Z+3	; 0x03
 1d8:	9b 83       	std	Y+3, r25	; 0x03
 1da:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 1dc:	11 96       	adiw	r26, 0x01	; 1
 1de:	8d 91       	ld	r24, X+
 1e0:	9c 91       	ld	r25, X
 1e2:	12 97       	sbiw	r26, 0x02	; 2
 1e4:	e8 17       	cp	r30, r24
 1e6:	f9 07       	cpc	r31, r25
 1e8:	31 f4       	brne	.+12     	; 0x1f6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 1ea:	84 81       	ldd	r24, Z+4	; 0x04
 1ec:	95 81       	ldd	r25, Z+5	; 0x05
 1ee:	12 96       	adiw	r26, 0x02	; 2
 1f0:	9c 93       	st	X, r25
 1f2:	8e 93       	st	-X, r24
 1f4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 1f6:	11 86       	std	Z+9, r1	; 0x09
 1f8:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 1fa:	8c 91       	ld	r24, X
 1fc:	81 50       	subi	r24, 0x01	; 1
 1fe:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 200:	8c 91       	ld	r24, X
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 208:	1b bc       	out	0x2b, r1	; 43
 20a:	8c e7       	ldi	r24, 0x7C	; 124
 20c:	8a bd       	out	0x2a, r24	; 42
 20e:	8b e0       	ldi	r24, 0x0B	; 11
 210:	8e bd       	out	0x2e, r24	; 46
 212:	89 b7       	in	r24, 0x39	; 57
 214:	80 61       	ori	r24, 0x10	; 16
 216:	89 bf       	out	0x39, r24	; 57
 218:	08 95       	ret

0000021a <pxPortInitialiseStack>:
 21a:	31 e1       	ldi	r19, 0x11	; 17
 21c:	fc 01       	movw	r30, r24
 21e:	30 83       	st	Z, r19
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	22 e2       	ldi	r18, 0x22	; 34
 224:	20 83       	st	Z, r18
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	a3 e3       	ldi	r26, 0x33	; 51
 22a:	a0 83       	st	Z, r26
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	60 83       	st	Z, r22
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	70 83       	st	Z, r23
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	10 82       	st	Z, r1
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	60 e8       	ldi	r22, 0x80	; 128
 23c:	60 83       	st	Z, r22
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	10 82       	st	Z, r1
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	62 e0       	ldi	r22, 0x02	; 2
 246:	60 83       	st	Z, r22
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	60 83       	st	Z, r22
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	60 83       	st	Z, r22
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	65 e0       	ldi	r22, 0x05	; 5
 258:	60 83       	st	Z, r22
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	66 e0       	ldi	r22, 0x06	; 6
 25e:	60 83       	st	Z, r22
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	67 e0       	ldi	r22, 0x07	; 7
 264:	60 83       	st	Z, r22
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	68 e0       	ldi	r22, 0x08	; 8
 26a:	60 83       	st	Z, r22
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	69 e0       	ldi	r22, 0x09	; 9
 270:	60 83       	st	Z, r22
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	60 e1       	ldi	r22, 0x10	; 16
 276:	60 83       	st	Z, r22
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	30 83       	st	Z, r19
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	32 e1       	ldi	r19, 0x12	; 18
 280:	30 83       	st	Z, r19
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	33 e1       	ldi	r19, 0x13	; 19
 286:	30 83       	st	Z, r19
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	34 e1       	ldi	r19, 0x14	; 20
 28c:	30 83       	st	Z, r19
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	35 e1       	ldi	r19, 0x15	; 21
 292:	30 83       	st	Z, r19
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	36 e1       	ldi	r19, 0x16	; 22
 298:	30 83       	st	Z, r19
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	37 e1       	ldi	r19, 0x17	; 23
 29e:	30 83       	st	Z, r19
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	38 e1       	ldi	r19, 0x18	; 24
 2a4:	30 83       	st	Z, r19
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	39 e1       	ldi	r19, 0x19	; 25
 2aa:	30 83       	st	Z, r19
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	30 e2       	ldi	r19, 0x20	; 32
 2b0:	30 83       	st	Z, r19
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	31 e2       	ldi	r19, 0x21	; 33
 2b6:	30 83       	st	Z, r19
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	20 83       	st	Z, r18
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	23 e2       	ldi	r18, 0x23	; 35
 2c0:	20 83       	st	Z, r18
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	40 83       	st	Z, r20
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	50 83       	st	Z, r21
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	26 e2       	ldi	r18, 0x26	; 38
 2ce:	20 83       	st	Z, r18
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	27 e2       	ldi	r18, 0x27	; 39
 2d4:	20 83       	st	Z, r18
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	28 e2       	ldi	r18, 0x28	; 40
 2da:	20 83       	st	Z, r18
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	29 e2       	ldi	r18, 0x29	; 41
 2e0:	20 83       	st	Z, r18
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	20 e3       	ldi	r18, 0x30	; 48
 2e6:	20 83       	st	Z, r18
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	21 e3       	ldi	r18, 0x31	; 49
 2ec:	20 83       	st	Z, r18
 2ee:	86 97       	sbiw	r24, 0x26	; 38
 2f0:	08 95       	ret

000002f2 <xPortStartScheduler>:
 2f2:	0e 94 04 01 	call	0x208	; 0x208 <prvSetupTimerInterrupt>
 2f6:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 2fa:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 2fe:	cd 91       	ld	r28, X+
 300:	cd bf       	out	0x3d, r28	; 61
 302:	dd 91       	ld	r29, X+
 304:	de bf       	out	0x3e, r29	; 62
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	cf 90       	pop	r12
 32e:	bf 90       	pop	r11
 330:	af 90       	pop	r10
 332:	9f 90       	pop	r9
 334:	8f 90       	pop	r8
 336:	7f 90       	pop	r7
 338:	6f 90       	pop	r6
 33a:	5f 90       	pop	r5
 33c:	4f 90       	pop	r4
 33e:	3f 90       	pop	r3
 340:	2f 90       	pop	r2
 342:	1f 90       	pop	r1
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	08 95       	ret
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	08 95       	ret

00000350 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	0f 92       	push	r0
 358:	1f 92       	push	r1
 35a:	11 24       	eor	r1, r1
 35c:	2f 92       	push	r2
 35e:	3f 92       	push	r3
 360:	4f 92       	push	r4
 362:	5f 92       	push	r5
 364:	6f 92       	push	r6
 366:	7f 92       	push	r7
 368:	8f 92       	push	r8
 36a:	9f 92       	push	r9
 36c:	af 92       	push	r10
 36e:	bf 92       	push	r11
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	2f 93       	push	r18
 37e:	3f 93       	push	r19
 380:	4f 93       	push	r20
 382:	5f 93       	push	r21
 384:	6f 93       	push	r22
 386:	7f 93       	push	r23
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	af 93       	push	r26
 38e:	bf 93       	push	r27
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
 398:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 39c:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 3a0:	0d b6       	in	r0, 0x3d	; 61
 3a2:	0d 92       	st	X+, r0
 3a4:	0e b6       	in	r0, 0x3e	; 62
 3a6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 3a8:	0e 94 f0 06 	call	0xde0	; 0xde0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 3ac:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 3b0:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 3b4:	cd 91       	ld	r28, X+
 3b6:	cd bf       	out	0x3d, r28	; 61
 3b8:	dd 91       	ld	r29, X+
 3ba:	de bf       	out	0x3e, r29	; 62
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	df 90       	pop	r13
 3e2:	cf 90       	pop	r12
 3e4:	bf 90       	pop	r11
 3e6:	af 90       	pop	r10
 3e8:	9f 90       	pop	r9
 3ea:	8f 90       	pop	r8
 3ec:	7f 90       	pop	r7
 3ee:	6f 90       	pop	r6
 3f0:	5f 90       	pop	r5
 3f2:	4f 90       	pop	r4
 3f4:	3f 90       	pop	r3
 3f6:	2f 90       	pop	r2
 3f8:	1f 90       	pop	r1
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0

	asm volatile ( "ret" );
 400:	08 95       	ret

00000402 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	0f 92       	push	r0
 40a:	1f 92       	push	r1
 40c:	11 24       	eor	r1, r1
 40e:	2f 92       	push	r2
 410:	3f 92       	push	r3
 412:	4f 92       	push	r4
 414:	5f 92       	push	r5
 416:	6f 92       	push	r6
 418:	7f 92       	push	r7
 41a:	8f 92       	push	r8
 41c:	9f 92       	push	r9
 41e:	af 92       	push	r10
 420:	bf 92       	push	r11
 422:	cf 92       	push	r12
 424:	df 92       	push	r13
 426:	ef 92       	push	r14
 428:	ff 92       	push	r15
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	2f 93       	push	r18
 430:	3f 93       	push	r19
 432:	4f 93       	push	r20
 434:	5f 93       	push	r21
 436:	6f 93       	push	r22
 438:	7f 93       	push	r23
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
 43e:	af 93       	push	r26
 440:	bf 93       	push	r27
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
 44a:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 44e:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 452:	0d b6       	in	r0, 0x3d	; 61
 454:	0d 92       	st	X+, r0
 456:	0e b6       	in	r0, 0x3e	; 62
 458:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 45a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <xTaskIncrementTick>
 45e:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 460:	0e 94 f0 06 	call	0xde0	; 0xde0 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 464:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 468:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 46c:	cd 91       	ld	r28, X+
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	dd 91       	ld	r29, X+
 472:	de bf       	out	0x3e, r29	; 62
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
 49c:	bf 90       	pop	r11
 49e:	af 90       	pop	r10
 4a0:	9f 90       	pop	r9
 4a2:	8f 90       	pop	r8
 4a4:	7f 90       	pop	r7
 4a6:	6f 90       	pop	r6
 4a8:	5f 90       	pop	r5
 4aa:	4f 90       	pop	r4
 4ac:	3f 90       	pop	r3
 4ae:	2f 90       	pop	r2
 4b0:	1f 90       	pop	r1
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4b8:	08 95       	ret

000004ba <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 4ba:	0e 94 01 02 	call	0x402	; 0x402 <vPortYieldFromTick>
		asm volatile ( "reti" );
 4be:	18 95       	reti

000004c0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	ec 01       	movw	r28, r24
                }
            }
        }
    #endif

    vTaskSuspendAll();
 4c6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 4ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 4ce:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 4d2:	89 2b       	or	r24, r25
 4d4:	31 f4       	brne	.+12     	; 0x4e2 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 4d6:	8e e7       	ldi	r24, 0x7E	; 126
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 4de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 4e2:	20 97       	sbiw	r28, 0x00	; 0
 4e4:	c9 f0       	breq	.+50     	; 0x518 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 4e6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <xNextFreeByte>
 4ea:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <xNextFreeByte+0x1>
 4ee:	9e 01       	movw	r18, r28
 4f0:	28 0f       	add	r18, r24
 4f2:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 4f4:	2b 3d       	cpi	r18, 0xDB	; 219
 4f6:	45 e0       	ldi	r20, 0x05	; 5
 4f8:	34 07       	cpc	r19, r20
 4fa:	88 f4       	brcc	.+34     	; 0x51e <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 4fc:	82 17       	cp	r24, r18
 4fe:	93 07       	cpc	r25, r19
 500:	88 f4       	brcc	.+34     	; 0x524 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 502:	c0 91 7a 00 	lds	r28, 0x007A	; 0x80007a <__data_end>
 506:	d0 91 7b 00 	lds	r29, 0x007B	; 0x80007b <__data_end+0x1>
 50a:	c8 0f       	add	r28, r24
 50c:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
 50e:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <xNextFreeByte+0x1>
 512:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <xNextFreeByte>
 516:	08 c0       	rjmp	.+16     	; 0x528 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
 518:	c0 e0       	ldi	r28, 0x00	; 0
 51a:	d0 e0       	ldi	r29, 0x00	; 0
 51c:	05 c0       	rjmp	.+10     	; 0x528 <pvPortMalloc+0x68>
 51e:	c0 e0       	ldi	r28, 0x00	; 0
 520:	d0 e0       	ldi	r29, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <pvPortMalloc+0x68>
 524:	c0 e0       	ldi	r28, 0x00	; 0
 526:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 528:	0e 94 05 06 	call	0xc0a	; 0xc0a <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
 52c:	ce 01       	movw	r24, r28
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 534:	08 95       	ret

00000536 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 536:	e0 91 7e 06 	lds	r30, 0x067E	; 0x80067e <pxDelayedTaskList>
 53a:	f0 91 7f 06 	lds	r31, 0x067F	; 0x80067f <pxDelayedTaskList+0x1>
 53e:	80 81       	ld	r24, Z
 540:	81 11       	cpse	r24, r1
 542:	07 c0       	rjmp	.+14     	; 0x552 <prvResetNextTaskUnblockTime+0x1c>
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	9f ef       	ldi	r25, 0xFF	; 255
 548:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
 54c:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
 550:	08 95       	ret
 552:	e0 91 7e 06 	lds	r30, 0x067E	; 0x80067e <pxDelayedTaskList>
 556:	f0 91 7f 06 	lds	r31, 0x067F	; 0x80067f <pxDelayedTaskList+0x1>
 55a:	05 80       	ldd	r0, Z+5	; 0x05
 55c:	f6 81       	ldd	r31, Z+6	; 0x06
 55e:	e0 2d       	mov	r30, r0
 560:	80 81       	ld	r24, Z
 562:	91 81       	ldd	r25, Z+1	; 0x01
 564:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
 568:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
 56c:	08 95       	ret

0000056e <prvDeleteTCB>:
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	ec 01       	movw	r28, r24
 574:	8f 89       	ldd	r24, Y+23	; 0x17
 576:	98 8d       	ldd	r25, Y+24	; 0x18
 578:	0e 94 9a 02 	call	0x534	; 0x534 <vPortFree>
 57c:	ce 01       	movw	r24, r28
 57e:	0e 94 9a 02 	call	0x534	; 0x534 <vPortFree>
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <prvInitialiseNewTask>:
 588:	6f 92       	push	r6
 58a:	7f 92       	push	r7
 58c:	8f 92       	push	r8
 58e:	9f 92       	push	r9
 590:	af 92       	push	r10
 592:	bf 92       	push	r11
 594:	cf 92       	push	r12
 596:	df 92       	push	r13
 598:	ef 92       	push	r14
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
 5a6:	4c 01       	movw	r8, r24
 5a8:	d5 01       	movw	r26, r10
 5aa:	57 96       	adiw	r26, 0x17	; 23
 5ac:	8d 91       	ld	r24, X+
 5ae:	9c 91       	ld	r25, X
 5b0:	58 97       	sbiw	r26, 0x18	; 24
 5b2:	21 50       	subi	r18, 0x01	; 1
 5b4:	31 09       	sbc	r19, r1
 5b6:	3c 01       	movw	r6, r24
 5b8:	62 0e       	add	r6, r18
 5ba:	73 1e       	adc	r7, r19
 5bc:	61 15       	cp	r22, r1
 5be:	71 05       	cpc	r23, r1
 5c0:	89 f4       	brne	.+34     	; 0x5e4 <prvInitialiseNewTask+0x5c>
 5c2:	16 c0       	rjmp	.+44     	; 0x5f0 <prvInitialiseNewTask+0x68>
 5c4:	82 2f       	mov	r24, r18
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	fb 01       	movw	r30, r22
 5ca:	e8 0f       	add	r30, r24
 5cc:	f9 1f       	adc	r31, r25
 5ce:	30 81       	ld	r19, Z
 5d0:	d5 01       	movw	r26, r10
 5d2:	a8 0f       	add	r26, r24
 5d4:	b9 1f       	adc	r27, r25
 5d6:	59 96       	adiw	r26, 0x19	; 25
 5d8:	3c 93       	st	X, r19
 5da:	80 81       	ld	r24, Z
 5dc:	88 23       	and	r24, r24
 5de:	29 f0       	breq	.+10     	; 0x5ea <prvInitialiseNewTask+0x62>
 5e0:	2f 5f       	subi	r18, 0xFF	; 255
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <prvInitialiseNewTask+0x5e>
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	28 30       	cpi	r18, 0x08	; 8
 5e8:	68 f3       	brcs	.-38     	; 0x5c4 <prvInitialiseNewTask+0x3c>
 5ea:	f5 01       	movw	r30, r10
 5ec:	10 a2       	std	Z+32, r1	; 0x20
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <prvInitialiseNewTask+0x6e>
 5f0:	d5 01       	movw	r26, r10
 5f2:	59 96       	adiw	r26, 0x19	; 25
 5f4:	1c 92       	st	X, r1
 5f6:	b3 e0       	ldi	r27, 0x03	; 3
 5f8:	be 15       	cp	r27, r14
 5fa:	20 f4       	brcc	.+8      	; 0x604 <prvInitialiseNewTask+0x7c>
 5fc:	0f 2e       	mov	r0, r31
 5fe:	f3 e0       	ldi	r31, 0x03	; 3
 600:	ef 2e       	mov	r14, r31
 602:	f0 2d       	mov	r31, r0
 604:	f5 01       	movw	r30, r10
 606:	e6 8a       	std	Z+22, r14	; 0x16
 608:	c5 01       	movw	r24, r10
 60a:	02 96       	adiw	r24, 0x02	; 2
 60c:	0e 94 a8 00 	call	0x150	; 0x150 <vListInitialiseItem>
 610:	c5 01       	movw	r24, r10
 612:	0c 96       	adiw	r24, 0x0c	; 12
 614:	0e 94 a8 00 	call	0x150	; 0x150 <vListInitialiseItem>
 618:	d5 01       	movw	r26, r10
 61a:	19 96       	adiw	r26, 0x09	; 9
 61c:	bc 92       	st	X, r11
 61e:	ae 92       	st	-X, r10
 620:	18 97       	sbiw	r26, 0x08	; 8
 622:	84 e0       	ldi	r24, 0x04	; 4
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	8e 19       	sub	r24, r14
 628:	91 09       	sbc	r25, r1
 62a:	1d 96       	adiw	r26, 0x0d	; 13
 62c:	9c 93       	st	X, r25
 62e:	8e 93       	st	-X, r24
 630:	1c 97       	sbiw	r26, 0x0c	; 12
 632:	53 96       	adiw	r26, 0x13	; 19
 634:	bc 92       	st	X, r11
 636:	ae 92       	st	-X, r10
 638:	52 97       	sbiw	r26, 0x12	; 18
 63a:	84 e0       	ldi	r24, 0x04	; 4
 63c:	f5 01       	movw	r30, r10
 63e:	b1 96       	adiw	r30, 0x21	; 33
 640:	df 01       	movw	r26, r30
 642:	1d 92       	st	X+, r1
 644:	8a 95       	dec	r24
 646:	e9 f7       	brne	.-6      	; 0x642 <prvInitialiseNewTask+0xba>
 648:	f5 01       	movw	r30, r10
 64a:	15 a2       	std	Z+37, r1	; 0x25
 64c:	a8 01       	movw	r20, r16
 64e:	b4 01       	movw	r22, r8
 650:	c3 01       	movw	r24, r6
 652:	0e 94 0d 01 	call	0x21a	; 0x21a <pxPortInitialiseStack>
 656:	d5 01       	movw	r26, r10
 658:	8d 93       	st	X+, r24
 65a:	9c 93       	st	X, r25
 65c:	c1 14       	cp	r12, r1
 65e:	d1 04       	cpc	r13, r1
 660:	19 f0       	breq	.+6      	; 0x668 <prvInitialiseNewTask+0xe0>
 662:	f6 01       	movw	r30, r12
 664:	b1 82       	std	Z+1, r11	; 0x01
 666:	a0 82       	st	Z, r10
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	ef 90       	pop	r14
 672:	df 90       	pop	r13
 674:	cf 90       	pop	r12
 676:	bf 90       	pop	r11
 678:	af 90       	pop	r10
 67a:	9f 90       	pop	r9
 67c:	8f 90       	pop	r8
 67e:	7f 90       	pop	r7
 680:	6f 90       	pop	r6
 682:	08 95       	ret

00000684 <prvInitialiseTaskLists>:
 684:	cf 93       	push	r28
 686:	c0 e0       	ldi	r28, 0x00	; 0
 688:	10 c0       	rjmp	.+32     	; 0x6aa <prvInitialiseTaskLists+0x26>
 68a:	8c 2f       	mov	r24, r28
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	9c 01       	movw	r18, r24
 690:	22 0f       	add	r18, r18
 692:	33 1f       	adc	r19, r19
 694:	22 0f       	add	r18, r18
 696:	33 1f       	adc	r19, r19
 698:	22 0f       	add	r18, r18
 69a:	33 1f       	adc	r19, r19
 69c:	82 0f       	add	r24, r18
 69e:	93 1f       	adc	r25, r19
 6a0:	8e 56       	subi	r24, 0x6E	; 110
 6a2:	99 4f       	sbci	r25, 0xF9	; 249
 6a4:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
 6a8:	cf 5f       	subi	r28, 0xFF	; 255
 6aa:	c4 30       	cpi	r28, 0x04	; 4
 6ac:	70 f3       	brcs	.-36     	; 0x68a <prvInitialiseTaskLists+0x6>
 6ae:	89 e8       	ldi	r24, 0x89	; 137
 6b0:	96 e0       	ldi	r25, 0x06	; 6
 6b2:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
 6b6:	80 e8       	ldi	r24, 0x80	; 128
 6b8:	96 e0       	ldi	r25, 0x06	; 6
 6ba:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
 6be:	83 e7       	ldi	r24, 0x73	; 115
 6c0:	96 e0       	ldi	r25, 0x06	; 6
 6c2:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
 6c6:	8a e6       	ldi	r24, 0x6A	; 106
 6c8:	96 e0       	ldi	r25, 0x06	; 6
 6ca:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialise>
 6ce:	89 e8       	ldi	r24, 0x89	; 137
 6d0:	96 e0       	ldi	r25, 0x06	; 6
 6d2:	90 93 7f 06 	sts	0x067F, r25	; 0x80067f <pxDelayedTaskList+0x1>
 6d6:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <pxDelayedTaskList>
 6da:	80 e8       	ldi	r24, 0x80	; 128
 6dc:	96 e0       	ldi	r25, 0x06	; 6
 6de:	90 93 7d 06 	sts	0x067D, r25	; 0x80067d <pxOverflowDelayedTaskList+0x1>
 6e2:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <pxOverflowDelayedTaskList>
 6e6:	cf 91       	pop	r28
 6e8:	08 95       	ret

000006ea <prvAddNewTaskToReadyList>:
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	ec 01       	movw	r28, r24
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	0f 92       	push	r0
 6f6:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <uxCurrentNumberOfTasks>
 6fa:	8f 5f       	subi	r24, 0xFF	; 255
 6fc:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <uxCurrentNumberOfTasks>
 700:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 704:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 708:	89 2b       	or	r24, r25
 70a:	59 f4       	brne	.+22     	; 0x722 <prvAddNewTaskToReadyList+0x38>
 70c:	d0 93 b7 06 	sts	0x06B7, r29	; 0x8006b7 <pxCurrentTCB+0x1>
 710:	c0 93 b6 06 	sts	0x06B6, r28	; 0x8006b6 <pxCurrentTCB>
 714:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <uxCurrentNumberOfTasks>
 718:	81 30       	cpi	r24, 0x01	; 1
 71a:	99 f4       	brne	.+38     	; 0x742 <prvAddNewTaskToReadyList+0x58>
 71c:	0e 94 42 03 	call	0x684	; 0x684 <prvInitialiseTaskLists>
 720:	10 c0       	rjmp	.+32     	; 0x742 <prvAddNewTaskToReadyList+0x58>
 722:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <xSchedulerRunning>
 726:	81 11       	cpse	r24, r1
 728:	0c c0       	rjmp	.+24     	; 0x742 <prvAddNewTaskToReadyList+0x58>
 72a:	e0 91 b6 06 	lds	r30, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 72e:	f0 91 b7 06 	lds	r31, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 732:	96 89       	ldd	r25, Z+22	; 0x16
 734:	8e 89       	ldd	r24, Y+22	; 0x16
 736:	89 17       	cp	r24, r25
 738:	20 f0       	brcs	.+8      	; 0x742 <prvAddNewTaskToReadyList+0x58>
 73a:	d0 93 b7 06 	sts	0x06B7, r29	; 0x8006b7 <pxCurrentTCB+0x1>
 73e:	c0 93 b6 06 	sts	0x06B6, r28	; 0x8006b6 <pxCurrentTCB>
 742:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <uxTaskNumber>
 746:	8f 5f       	subi	r24, 0xFF	; 255
 748:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <uxTaskNumber>
 74c:	8e 89       	ldd	r24, Y+22	; 0x16
 74e:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <uxTopReadyPriority>
 752:	98 17       	cp	r25, r24
 754:	10 f4       	brcc	.+4      	; 0x75a <prvAddNewTaskToReadyList+0x70>
 756:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <uxTopReadyPriority>
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	fc 01       	movw	r30, r24
 75e:	ee 0f       	add	r30, r30
 760:	ff 1f       	adc	r31, r31
 762:	ee 0f       	add	r30, r30
 764:	ff 1f       	adc	r31, r31
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	8e 0f       	add	r24, r30
 76c:	9f 1f       	adc	r25, r31
 76e:	fc 01       	movw	r30, r24
 770:	ee 56       	subi	r30, 0x6E	; 110
 772:	f9 4f       	sbci	r31, 0xF9	; 249
 774:	01 80       	ldd	r0, Z+1	; 0x01
 776:	f2 81       	ldd	r31, Z+2	; 0x02
 778:	e0 2d       	mov	r30, r0
 77a:	fd 83       	std	Y+5, r31	; 0x05
 77c:	ec 83       	std	Y+4, r30	; 0x04
 77e:	84 81       	ldd	r24, Z+4	; 0x04
 780:	95 81       	ldd	r25, Z+5	; 0x05
 782:	9f 83       	std	Y+7, r25	; 0x07
 784:	8e 83       	std	Y+6, r24	; 0x06
 786:	a4 81       	ldd	r26, Z+4	; 0x04
 788:	b5 81       	ldd	r27, Z+5	; 0x05
 78a:	ce 01       	movw	r24, r28
 78c:	02 96       	adiw	r24, 0x02	; 2
 78e:	13 96       	adiw	r26, 0x03	; 3
 790:	9c 93       	st	X, r25
 792:	8e 93       	st	-X, r24
 794:	12 97       	sbiw	r26, 0x02	; 2
 796:	95 83       	std	Z+5, r25	; 0x05
 798:	84 83       	std	Z+4, r24	; 0x04
 79a:	ee 89       	ldd	r30, Y+22	; 0x16
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	cf 01       	movw	r24, r30
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	88 0f       	add	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	e8 0f       	add	r30, r24
 7ae:	f9 1f       	adc	r31, r25
 7b0:	ee 56       	subi	r30, 0x6E	; 110
 7b2:	f9 4f       	sbci	r31, 0xF9	; 249
 7b4:	fb 87       	std	Y+11, r31	; 0x0b
 7b6:	ea 87       	std	Y+10, r30	; 0x0a
 7b8:	80 81       	ld	r24, Z
 7ba:	8f 5f       	subi	r24, 0xFF	; 255
 7bc:	80 83       	st	Z, r24
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <xSchedulerRunning>
 7c6:	88 23       	and	r24, r24
 7c8:	51 f0       	breq	.+20     	; 0x7de <prvAddNewTaskToReadyList+0xf4>
 7ca:	e0 91 b6 06 	lds	r30, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 7ce:	f0 91 b7 06 	lds	r31, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 7d2:	96 89       	ldd	r25, Z+22	; 0x16
 7d4:	8e 89       	ldd	r24, Y+22	; 0x16
 7d6:	98 17       	cp	r25, r24
 7d8:	10 f4       	brcc	.+4      	; 0x7de <prvAddNewTaskToReadyList+0xf4>
 7da:	0e 94 a8 01 	call	0x350	; 0x350 <vPortYield>
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	08 95       	ret

000007e4 <prvCheckTasksWaitingTermination>:
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
 7e8:	1c c0       	rjmp	.+56     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	f8 94       	cli
 7ee:	0f 92       	push	r0
 7f0:	e0 91 6f 06 	lds	r30, 0x066F	; 0x80066f <xTasksWaitingTermination+0x5>
 7f4:	f0 91 70 06 	lds	r31, 0x0670	; 0x800670 <xTasksWaitingTermination+0x6>
 7f8:	c6 81       	ldd	r28, Z+6	; 0x06
 7fa:	d7 81       	ldd	r29, Z+7	; 0x07
 7fc:	ce 01       	movw	r24, r28
 7fe:	02 96       	adiw	r24, 0x02	; 2
 800:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uxListRemove>
 804:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <uxCurrentNumberOfTasks>
 808:	81 50       	subi	r24, 0x01	; 1
 80a:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <uxCurrentNumberOfTasks>
 80e:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <uxDeletedTasksWaitingCleanUp>
 812:	81 50       	subi	r24, 0x01	; 1
 814:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <uxDeletedTasksWaitingCleanUp>
 818:	0f 90       	pop	r0
 81a:	0f be       	out	0x3f, r0	; 63
 81c:	ce 01       	movw	r24, r28
 81e:	0e 94 b7 02 	call	0x56e	; 0x56e <prvDeleteTCB>
 822:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <uxDeletedTasksWaitingCleanUp>
 826:	81 11       	cpse	r24, r1
 828:	e0 cf       	rjmp	.-64     	; 0x7ea <prvCheckTasksWaitingTermination+0x6>
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	08 95       	ret

00000830 <prvIdleTask>:
 830:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <prvCheckTasksWaitingTermination>
 834:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <pxReadyTasksLists>
 838:	82 30       	cpi	r24, 0x02	; 2
 83a:	d0 f3       	brcs	.-12     	; 0x830 <prvIdleTask>
 83c:	0e 94 a8 01 	call	0x350	; 0x350 <vPortYield>
 840:	f7 cf       	rjmp	.-18     	; 0x830 <prvIdleTask>

00000842 <prvAddCurrentTaskToDelayedList>:
 842:	0f 93       	push	r16
 844:	1f 93       	push	r17
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	ec 01       	movw	r28, r24
 84c:	00 91 66 06 	lds	r16, 0x0666	; 0x800666 <xTickCount>
 850:	10 91 67 06 	lds	r17, 0x0667	; 0x800667 <xTickCount+0x1>
 854:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 858:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 85c:	02 96       	adiw	r24, 0x02	; 2
 85e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uxListRemove>
 862:	c0 0f       	add	r28, r16
 864:	d1 1f       	adc	r29, r17
 866:	e0 91 b6 06 	lds	r30, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 86a:	f0 91 b7 06 	lds	r31, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 86e:	d3 83       	std	Z+3, r29	; 0x03
 870:	c2 83       	std	Z+2, r28	; 0x02
 872:	c0 17       	cp	r28, r16
 874:	d1 07       	cpc	r29, r17
 876:	68 f4       	brcc	.+26     	; 0x892 <__stack+0x33>
 878:	60 91 b6 06 	lds	r22, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 87c:	70 91 b7 06 	lds	r23, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 880:	80 91 7c 06 	lds	r24, 0x067C	; 0x80067c <pxOverflowDelayedTaskList>
 884:	90 91 7d 06 	lds	r25, 0x067D	; 0x80067d <pxOverflowDelayedTaskList+0x1>
 888:	6e 5f       	subi	r22, 0xFE	; 254
 88a:	7f 4f       	sbci	r23, 0xFF	; 255
 88c:	0e 94 ac 00 	call	0x158	; 0x158 <vListInsert>
 890:	17 c0       	rjmp	.+46     	; 0x8c0 <__stack+0x61>
 892:	60 91 b6 06 	lds	r22, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 896:	70 91 b7 06 	lds	r23, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 89a:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <pxDelayedTaskList>
 89e:	90 91 7f 06 	lds	r25, 0x067F	; 0x80067f <pxDelayedTaskList+0x1>
 8a2:	6e 5f       	subi	r22, 0xFE	; 254
 8a4:	7f 4f       	sbci	r23, 0xFF	; 255
 8a6:	0e 94 ac 00 	call	0x158	; 0x158 <vListInsert>
 8aa:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <xNextTaskUnblockTime>
 8ae:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <xNextTaskUnblockTime+0x1>
 8b2:	c8 17       	cp	r28, r24
 8b4:	d9 07       	cpc	r29, r25
 8b6:	20 f4       	brcc	.+8      	; 0x8c0 <__stack+0x61>
 8b8:	d0 93 5e 06 	sts	0x065E, r29	; 0x80065e <xNextTaskUnblockTime+0x1>
 8bc:	c0 93 5d 06 	sts	0x065D, r28	; 0x80065d <xNextTaskUnblockTime>
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	1f 91       	pop	r17
 8c6:	0f 91       	pop	r16
 8c8:	08 95       	ret

000008ca <xTaskCreate>:
 8ca:	2f 92       	push	r2
 8cc:	3f 92       	push	r3
 8ce:	4f 92       	push	r4
 8d0:	5f 92       	push	r5
 8d2:	6f 92       	push	r6
 8d4:	7f 92       	push	r7
 8d6:	8f 92       	push	r8
 8d8:	9f 92       	push	r9
 8da:	af 92       	push	r10
 8dc:	bf 92       	push	r11
 8de:	cf 92       	push	r12
 8e0:	df 92       	push	r13
 8e2:	ef 92       	push	r14
 8e4:	ff 92       	push	r15
 8e6:	0f 93       	push	r16
 8e8:	1f 93       	push	r17
 8ea:	cf 93       	push	r28
 8ec:	df 93       	push	r29
 8ee:	3c 01       	movw	r6, r24
 8f0:	1b 01       	movw	r2, r22
 8f2:	5a 01       	movw	r10, r20
 8f4:	29 01       	movw	r4, r18
 8f6:	ca 01       	movw	r24, r20
 8f8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <pvPortMalloc>
 8fc:	6c 01       	movw	r12, r24
 8fe:	89 2b       	or	r24, r25
 900:	71 f0       	breq	.+28     	; 0x91e <xTaskCreate+0x54>
 902:	86 e2       	ldi	r24, 0x26	; 38
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 60 02 	call	0x4c0	; 0x4c0 <pvPortMalloc>
 90a:	ec 01       	movw	r28, r24
 90c:	89 2b       	or	r24, r25
 90e:	19 f0       	breq	.+6      	; 0x916 <xTaskCreate+0x4c>
 910:	d8 8e       	std	Y+24, r13	; 0x18
 912:	cf 8a       	std	Y+23, r12	; 0x17
 914:	06 c0       	rjmp	.+12     	; 0x922 <xTaskCreate+0x58>
 916:	c6 01       	movw	r24, r12
 918:	0e 94 9a 02 	call	0x534	; 0x534 <vPortFree>
 91c:	02 c0       	rjmp	.+4      	; 0x922 <xTaskCreate+0x58>
 91e:	c0 e0       	ldi	r28, 0x00	; 0
 920:	d0 e0       	ldi	r29, 0x00	; 0
 922:	20 97       	sbiw	r28, 0x00	; 0
 924:	91 f0       	breq	.+36     	; 0x94a <xTaskCreate+0x80>
 926:	95 01       	movw	r18, r10
 928:	40 e0       	ldi	r20, 0x00	; 0
 92a:	50 e0       	ldi	r21, 0x00	; 0
 92c:	81 2c       	mov	r8, r1
 92e:	91 2c       	mov	r9, r1
 930:	5e 01       	movw	r10, r28
 932:	67 01       	movw	r12, r14
 934:	e0 2e       	mov	r14, r16
 936:	82 01       	movw	r16, r4
 938:	b1 01       	movw	r22, r2
 93a:	c3 01       	movw	r24, r6
 93c:	0e 94 c4 02 	call	0x588	; 0x588 <prvInitialiseNewTask>
 940:	ce 01       	movw	r24, r28
 942:	0e 94 75 03 	call	0x6ea	; 0x6ea <prvAddNewTaskToReadyList>
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	01 c0       	rjmp	.+2      	; 0x94c <xTaskCreate+0x82>
 94a:	8f ef       	ldi	r24, 0xFF	; 255
 94c:	df 91       	pop	r29
 94e:	cf 91       	pop	r28
 950:	1f 91       	pop	r17
 952:	0f 91       	pop	r16
 954:	ff 90       	pop	r15
 956:	ef 90       	pop	r14
 958:	df 90       	pop	r13
 95a:	cf 90       	pop	r12
 95c:	bf 90       	pop	r11
 95e:	af 90       	pop	r10
 960:	9f 90       	pop	r9
 962:	8f 90       	pop	r8
 964:	7f 90       	pop	r7
 966:	6f 90       	pop	r6
 968:	5f 90       	pop	r5
 96a:	4f 90       	pop	r4
 96c:	3f 90       	pop	r3
 96e:	2f 90       	pop	r2
 970:	08 95       	ret

00000972 <vTaskStartScheduler>:
 972:	ef 92       	push	r14
 974:	ff 92       	push	r15
 976:	0f 93       	push	r16
 978:	0f 2e       	mov	r0, r31
 97a:	fb e5       	ldi	r31, 0x5B	; 91
 97c:	ef 2e       	mov	r14, r31
 97e:	f6 e0       	ldi	r31, 0x06	; 6
 980:	ff 2e       	mov	r15, r31
 982:	f0 2d       	mov	r31, r0
 984:	00 e0       	ldi	r16, 0x00	; 0
 986:	20 e0       	ldi	r18, 0x00	; 0
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	45 e5       	ldi	r20, 0x55	; 85
 98c:	50 e0       	ldi	r21, 0x00	; 0
 98e:	64 e7       	ldi	r22, 0x74	; 116
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	88 e1       	ldi	r24, 0x18	; 24
 994:	94 e0       	ldi	r25, 0x04	; 4
 996:	0e 94 65 04 	call	0x8ca	; 0x8ca <xTaskCreate>
 99a:	81 30       	cpi	r24, 0x01	; 1
 99c:	81 f4       	brne	.+32     	; 0x9be <vTaskStartScheduler+0x4c>
 99e:	f8 94       	cli
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	9f ef       	ldi	r25, 0xFF	; 255
 9a4:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
 9a8:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <xSchedulerRunning>
 9b2:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <xTickCount+0x1>
 9b6:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <xTickCount>
 9ba:	0e 94 79 01 	call	0x2f2	; 0x2f2 <xPortStartScheduler>
 9be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	08 95       	ret

000009ca <vTaskSuspendAll>:
 9ca:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
 9ce:	8f 5f       	subi	r24, 0xFF	; 255
 9d0:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <uxSchedulerSuspended>
 9d4:	08 95       	ret

000009d6 <xTaskIncrementTick>:
 9d6:	0f 93       	push	r16
 9d8:	1f 93       	push	r17
 9da:	cf 93       	push	r28
 9dc:	df 93       	push	r29
 9de:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
 9e2:	81 11       	cpse	r24, r1
 9e4:	01 c1       	rjmp	.+514    	; 0xbe8 <xTaskIncrementTick+0x212>
 9e6:	c0 91 66 06 	lds	r28, 0x0666	; 0x800666 <xTickCount>
 9ea:	d0 91 67 06 	lds	r29, 0x0667	; 0x800667 <xTickCount+0x1>
 9ee:	8e 01       	movw	r16, r28
 9f0:	0f 5f       	subi	r16, 0xFF	; 255
 9f2:	1f 4f       	sbci	r17, 0xFF	; 255
 9f4:	10 93 67 06 	sts	0x0667, r17	; 0x800667 <xTickCount+0x1>
 9f8:	00 93 66 06 	sts	0x0666, r16	; 0x800666 <xTickCount>
 9fc:	01 15       	cp	r16, r1
 9fe:	11 05       	cpc	r17, r1
 a00:	b9 f4       	brne	.+46     	; 0xa30 <xTaskIncrementTick+0x5a>
 a02:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <pxDelayedTaskList>
 a06:	90 91 7f 06 	lds	r25, 0x067F	; 0x80067f <pxDelayedTaskList+0x1>
 a0a:	20 91 7c 06 	lds	r18, 0x067C	; 0x80067c <pxOverflowDelayedTaskList>
 a0e:	30 91 7d 06 	lds	r19, 0x067D	; 0x80067d <pxOverflowDelayedTaskList+0x1>
 a12:	30 93 7f 06 	sts	0x067F, r19	; 0x80067f <pxDelayedTaskList+0x1>
 a16:	20 93 7e 06 	sts	0x067E, r18	; 0x80067e <pxDelayedTaskList>
 a1a:	90 93 7d 06 	sts	0x067D, r25	; 0x80067d <pxOverflowDelayedTaskList+0x1>
 a1e:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <pxOverflowDelayedTaskList>
 a22:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <xNumOfOverflows>
 a26:	8f 5f       	subi	r24, 0xFF	; 255
 a28:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <xNumOfOverflows>
 a2c:	0e 94 9b 02 	call	0x536	; 0x536 <prvResetNextTaskUnblockTime>
 a30:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <xNextTaskUnblockTime>
 a34:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <xNextTaskUnblockTime+0x1>
 a38:	08 17       	cp	r16, r24
 a3a:	19 07       	cpc	r17, r25
 a3c:	20 f4       	brcc	.+8      	; 0xa46 <xTaskIncrementTick+0x70>
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	b8 c0       	rjmp	.+368    	; 0xbb2 <xTaskIncrementTick+0x1dc>
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <xTaskIncrementTick+0x72>
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	e0 91 7e 06 	lds	r30, 0x067E	; 0x80067e <pxDelayedTaskList>
 a4c:	f0 91 7f 06 	lds	r31, 0x067F	; 0x80067f <pxDelayedTaskList+0x1>
 a50:	90 81       	ld	r25, Z
 a52:	91 11       	cpse	r25, r1
 a54:	07 c0       	rjmp	.+14     	; 0xa64 <xTaskIncrementTick+0x8e>
 a56:	2f ef       	ldi	r18, 0xFF	; 255
 a58:	3f ef       	ldi	r19, 0xFF	; 255
 a5a:	30 93 5e 06 	sts	0x065E, r19	; 0x80065e <xNextTaskUnblockTime+0x1>
 a5e:	20 93 5d 06 	sts	0x065D, r18	; 0x80065d <xNextTaskUnblockTime>
 a62:	a7 c0       	rjmp	.+334    	; 0xbb2 <xTaskIncrementTick+0x1dc>
 a64:	e0 91 7e 06 	lds	r30, 0x067E	; 0x80067e <pxDelayedTaskList>
 a68:	f0 91 7f 06 	lds	r31, 0x067F	; 0x80067f <pxDelayedTaskList+0x1>
 a6c:	05 80       	ldd	r0, Z+5	; 0x05
 a6e:	f6 81       	ldd	r31, Z+6	; 0x06
 a70:	e0 2d       	mov	r30, r0
 a72:	06 80       	ldd	r0, Z+6	; 0x06
 a74:	f7 81       	ldd	r31, Z+7	; 0x07
 a76:	e0 2d       	mov	r30, r0
 a78:	22 81       	ldd	r18, Z+2	; 0x02
 a7a:	33 81       	ldd	r19, Z+3	; 0x03
 a7c:	02 17       	cp	r16, r18
 a7e:	13 07       	cpc	r17, r19
 a80:	28 f4       	brcc	.+10     	; 0xa8c <xTaskIncrementTick+0xb6>
 a82:	30 93 5e 06 	sts	0x065E, r19	; 0x80065e <xNextTaskUnblockTime+0x1>
 a86:	20 93 5d 06 	sts	0x065D, r18	; 0x80065d <xNextTaskUnblockTime>
 a8a:	93 c0       	rjmp	.+294    	; 0xbb2 <xTaskIncrementTick+0x1dc>
 a8c:	a2 85       	ldd	r26, Z+10	; 0x0a
 a8e:	b3 85       	ldd	r27, Z+11	; 0x0b
 a90:	24 81       	ldd	r18, Z+4	; 0x04
 a92:	35 81       	ldd	r19, Z+5	; 0x05
 a94:	46 81       	ldd	r20, Z+6	; 0x06
 a96:	57 81       	ldd	r21, Z+7	; 0x07
 a98:	e9 01       	movw	r28, r18
 a9a:	5d 83       	std	Y+5, r21	; 0x05
 a9c:	4c 83       	std	Y+4, r20	; 0x04
 a9e:	26 81       	ldd	r18, Z+6	; 0x06
 aa0:	37 81       	ldd	r19, Z+7	; 0x07
 aa2:	44 81       	ldd	r20, Z+4	; 0x04
 aa4:	55 81       	ldd	r21, Z+5	; 0x05
 aa6:	e9 01       	movw	r28, r18
 aa8:	5b 83       	std	Y+3, r21	; 0x03
 aaa:	4a 83       	std	Y+2, r20	; 0x02
 aac:	11 96       	adiw	r26, 0x01	; 1
 aae:	2d 91       	ld	r18, X+
 ab0:	3c 91       	ld	r19, X
 ab2:	12 97       	sbiw	r26, 0x02	; 2
 ab4:	af 01       	movw	r20, r30
 ab6:	4e 5f       	subi	r20, 0xFE	; 254
 ab8:	5f 4f       	sbci	r21, 0xFF	; 255
 aba:	24 17       	cp	r18, r20
 abc:	35 07       	cpc	r19, r21
 abe:	31 f4       	brne	.+12     	; 0xacc <xTaskIncrementTick+0xf6>
 ac0:	26 81       	ldd	r18, Z+6	; 0x06
 ac2:	37 81       	ldd	r19, Z+7	; 0x07
 ac4:	12 96       	adiw	r26, 0x02	; 2
 ac6:	3c 93       	st	X, r19
 ac8:	2e 93       	st	-X, r18
 aca:	11 97       	sbiw	r26, 0x01	; 1
 acc:	13 86       	std	Z+11, r1	; 0x0b
 ace:	12 86       	std	Z+10, r1	; 0x0a
 ad0:	9c 91       	ld	r25, X
 ad2:	91 50       	subi	r25, 0x01	; 1
 ad4:	9c 93       	st	X, r25
 ad6:	a4 89       	ldd	r26, Z+20	; 0x14
 ad8:	b5 89       	ldd	r27, Z+21	; 0x15
 ada:	10 97       	sbiw	r26, 0x00	; 0
 adc:	19 f1       	breq	.+70     	; 0xb24 <xTaskIncrementTick+0x14e>
 ade:	26 85       	ldd	r18, Z+14	; 0x0e
 ae0:	37 85       	ldd	r19, Z+15	; 0x0f
 ae2:	60 89       	ldd	r22, Z+16	; 0x10
 ae4:	71 89       	ldd	r23, Z+17	; 0x11
 ae6:	e9 01       	movw	r28, r18
 ae8:	7d 83       	std	Y+5, r23	; 0x05
 aea:	6c 83       	std	Y+4, r22	; 0x04
 aec:	20 89       	ldd	r18, Z+16	; 0x10
 aee:	31 89       	ldd	r19, Z+17	; 0x11
 af0:	66 85       	ldd	r22, Z+14	; 0x0e
 af2:	77 85       	ldd	r23, Z+15	; 0x0f
 af4:	e9 01       	movw	r28, r18
 af6:	7b 83       	std	Y+3, r23	; 0x03
 af8:	6a 83       	std	Y+2, r22	; 0x02
 afa:	11 96       	adiw	r26, 0x01	; 1
 afc:	6d 91       	ld	r22, X+
 afe:	7c 91       	ld	r23, X
 b00:	12 97       	sbiw	r26, 0x02	; 2
 b02:	9f 01       	movw	r18, r30
 b04:	24 5f       	subi	r18, 0xF4	; 244
 b06:	3f 4f       	sbci	r19, 0xFF	; 255
 b08:	62 17       	cp	r22, r18
 b0a:	73 07       	cpc	r23, r19
 b0c:	31 f4       	brne	.+12     	; 0xb1a <xTaskIncrementTick+0x144>
 b0e:	20 89       	ldd	r18, Z+16	; 0x10
 b10:	31 89       	ldd	r19, Z+17	; 0x11
 b12:	12 96       	adiw	r26, 0x02	; 2
 b14:	3c 93       	st	X, r19
 b16:	2e 93       	st	-X, r18
 b18:	11 97       	sbiw	r26, 0x01	; 1
 b1a:	15 8a       	std	Z+21, r1	; 0x15
 b1c:	14 8a       	std	Z+20, r1	; 0x14
 b1e:	9c 91       	ld	r25, X
 b20:	91 50       	subi	r25, 0x01	; 1
 b22:	9c 93       	st	X, r25
 b24:	26 89       	ldd	r18, Z+22	; 0x16
 b26:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <uxTopReadyPriority>
 b2a:	92 17       	cp	r25, r18
 b2c:	10 f4       	brcc	.+4      	; 0xb32 <xTaskIncrementTick+0x15c>
 b2e:	20 93 65 06 	sts	0x0665, r18	; 0x800665 <uxTopReadyPriority>
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	d9 01       	movw	r26, r18
 b36:	aa 0f       	add	r26, r26
 b38:	bb 1f       	adc	r27, r27
 b3a:	aa 0f       	add	r26, r26
 b3c:	bb 1f       	adc	r27, r27
 b3e:	aa 0f       	add	r26, r26
 b40:	bb 1f       	adc	r27, r27
 b42:	2a 0f       	add	r18, r26
 b44:	3b 1f       	adc	r19, r27
 b46:	d9 01       	movw	r26, r18
 b48:	ae 56       	subi	r26, 0x6E	; 110
 b4a:	b9 4f       	sbci	r27, 0xF9	; 249
 b4c:	11 96       	adiw	r26, 0x01	; 1
 b4e:	0d 90       	ld	r0, X+
 b50:	bc 91       	ld	r27, X
 b52:	a0 2d       	mov	r26, r0
 b54:	b5 83       	std	Z+5, r27	; 0x05
 b56:	a4 83       	std	Z+4, r26	; 0x04
 b58:	14 96       	adiw	r26, 0x04	; 4
 b5a:	2d 91       	ld	r18, X+
 b5c:	3c 91       	ld	r19, X
 b5e:	15 97       	sbiw	r26, 0x05	; 5
 b60:	37 83       	std	Z+7, r19	; 0x07
 b62:	26 83       	std	Z+6, r18	; 0x06
 b64:	14 96       	adiw	r26, 0x04	; 4
 b66:	2d 91       	ld	r18, X+
 b68:	3c 91       	ld	r19, X
 b6a:	15 97       	sbiw	r26, 0x05	; 5
 b6c:	e9 01       	movw	r28, r18
 b6e:	5b 83       	std	Y+3, r21	; 0x03
 b70:	4a 83       	std	Y+2, r20	; 0x02
 b72:	15 96       	adiw	r26, 0x05	; 5
 b74:	5c 93       	st	X, r21
 b76:	4e 93       	st	-X, r20
 b78:	14 97       	sbiw	r26, 0x04	; 4
 b7a:	a6 89       	ldd	r26, Z+22	; 0x16
 b7c:	b0 e0       	ldi	r27, 0x00	; 0
 b7e:	9d 01       	movw	r18, r26
 b80:	22 0f       	add	r18, r18
 b82:	33 1f       	adc	r19, r19
 b84:	22 0f       	add	r18, r18
 b86:	33 1f       	adc	r19, r19
 b88:	22 0f       	add	r18, r18
 b8a:	33 1f       	adc	r19, r19
 b8c:	a2 0f       	add	r26, r18
 b8e:	b3 1f       	adc	r27, r19
 b90:	ae 56       	subi	r26, 0x6E	; 110
 b92:	b9 4f       	sbci	r27, 0xF9	; 249
 b94:	b3 87       	std	Z+11, r27	; 0x0b
 b96:	a2 87       	std	Z+10, r26	; 0x0a
 b98:	9c 91       	ld	r25, X
 b9a:	9f 5f       	subi	r25, 0xFF	; 255
 b9c:	9c 93       	st	X, r25
 b9e:	26 89       	ldd	r18, Z+22	; 0x16
 ba0:	e0 91 b6 06 	lds	r30, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 ba4:	f0 91 b7 06 	lds	r31, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 ba8:	96 89       	ldd	r25, Z+22	; 0x16
 baa:	29 17       	cp	r18, r25
 bac:	08 f0       	brcs	.+2      	; 0xbb0 <xTaskIncrementTick+0x1da>
 bae:	49 cf       	rjmp	.-366    	; 0xa42 <xTaskIncrementTick+0x6c>
 bb0:	4b cf       	rjmp	.-362    	; 0xa48 <xTaskIncrementTick+0x72>
 bb2:	e0 91 b6 06 	lds	r30, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 bb6:	f0 91 b7 06 	lds	r31, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 bba:	26 89       	ldd	r18, Z+22	; 0x16
 bbc:	30 e0       	ldi	r19, 0x00	; 0
 bbe:	f9 01       	movw	r30, r18
 bc0:	ee 0f       	add	r30, r30
 bc2:	ff 1f       	adc	r31, r31
 bc4:	ee 0f       	add	r30, r30
 bc6:	ff 1f       	adc	r31, r31
 bc8:	ee 0f       	add	r30, r30
 bca:	ff 1f       	adc	r31, r31
 bcc:	2e 0f       	add	r18, r30
 bce:	3f 1f       	adc	r19, r31
 bd0:	f9 01       	movw	r30, r18
 bd2:	ee 56       	subi	r30, 0x6E	; 110
 bd4:	f9 4f       	sbci	r31, 0xF9	; 249
 bd6:	90 81       	ld	r25, Z
 bd8:	92 30       	cpi	r25, 0x02	; 2
 bda:	08 f0       	brcs	.+2      	; 0xbde <xTaskIncrementTick+0x208>
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <xYieldPending>
 be2:	91 11       	cpse	r25, r1
 be4:	0c c0       	rjmp	.+24     	; 0xbfe <xTaskIncrementTick+0x228>
 be6:	0c c0       	rjmp	.+24     	; 0xc00 <xTaskIncrementTick+0x22a>
 be8:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <xPendedTicks>
 bec:	90 91 63 06 	lds	r25, 0x0663	; 0x800663 <xPendedTicks+0x1>
 bf0:	01 96       	adiw	r24, 0x01	; 1
 bf2:	90 93 63 06 	sts	0x0663, r25	; 0x800663 <xPendedTicks+0x1>
 bf6:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <xPendedTicks>
 bfa:	80 e0       	ldi	r24, 0x00	; 0
 bfc:	01 c0       	rjmp	.+2      	; 0xc00 <xTaskIncrementTick+0x22a>
 bfe:	81 e0       	ldi	r24, 0x01	; 1
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	1f 91       	pop	r17
 c06:	0f 91       	pop	r16
 c08:	08 95       	ret

00000c0a <xTaskResumeAll>:
 c0a:	cf 93       	push	r28
 c0c:	df 93       	push	r29
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	0f 92       	push	r0
 c14:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
 c18:	81 50       	subi	r24, 0x01	; 1
 c1a:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <uxSchedulerSuspended>
 c1e:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
 c22:	81 11       	cpse	r24, r1
 c24:	bf c0       	rjmp	.+382    	; 0xda4 <xTaskResumeAll+0x19a>
 c26:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <uxCurrentNumberOfTasks>
 c2a:	81 11       	cpse	r24, r1
 c2c:	96 c0       	rjmp	.+300    	; 0xd5a <xTaskResumeAll+0x150>
 c2e:	bd c0       	rjmp	.+378    	; 0xdaa <xTaskResumeAll+0x1a0>
 c30:	e0 91 78 06 	lds	r30, 0x0678	; 0x800678 <xPendingReadyList+0x5>
 c34:	f0 91 79 06 	lds	r31, 0x0679	; 0x800679 <xPendingReadyList+0x6>
 c38:	06 80       	ldd	r0, Z+6	; 0x06
 c3a:	f7 81       	ldd	r31, Z+7	; 0x07
 c3c:	e0 2d       	mov	r30, r0
 c3e:	a4 89       	ldd	r26, Z+20	; 0x14
 c40:	b5 89       	ldd	r27, Z+21	; 0x15
 c42:	c6 85       	ldd	r28, Z+14	; 0x0e
 c44:	d7 85       	ldd	r29, Z+15	; 0x0f
 c46:	80 89       	ldd	r24, Z+16	; 0x10
 c48:	91 89       	ldd	r25, Z+17	; 0x11
 c4a:	9d 83       	std	Y+5, r25	; 0x05
 c4c:	8c 83       	std	Y+4, r24	; 0x04
 c4e:	c0 89       	ldd	r28, Z+16	; 0x10
 c50:	d1 89       	ldd	r29, Z+17	; 0x11
 c52:	86 85       	ldd	r24, Z+14	; 0x0e
 c54:	97 85       	ldd	r25, Z+15	; 0x0f
 c56:	9b 83       	std	Y+3, r25	; 0x03
 c58:	8a 83       	std	Y+2, r24	; 0x02
 c5a:	11 96       	adiw	r26, 0x01	; 1
 c5c:	2d 91       	ld	r18, X+
 c5e:	3c 91       	ld	r19, X
 c60:	12 97       	sbiw	r26, 0x02	; 2
 c62:	cf 01       	movw	r24, r30
 c64:	0c 96       	adiw	r24, 0x0c	; 12
 c66:	28 17       	cp	r18, r24
 c68:	39 07       	cpc	r19, r25
 c6a:	31 f4       	brne	.+12     	; 0xc78 <xTaskResumeAll+0x6e>
 c6c:	80 89       	ldd	r24, Z+16	; 0x10
 c6e:	91 89       	ldd	r25, Z+17	; 0x11
 c70:	12 96       	adiw	r26, 0x02	; 2
 c72:	9c 93       	st	X, r25
 c74:	8e 93       	st	-X, r24
 c76:	11 97       	sbiw	r26, 0x01	; 1
 c78:	15 8a       	std	Z+21, r1	; 0x15
 c7a:	14 8a       	std	Z+20, r1	; 0x14
 c7c:	8c 91       	ld	r24, X
 c7e:	81 50       	subi	r24, 0x01	; 1
 c80:	8c 93       	st	X, r24
 c82:	a2 85       	ldd	r26, Z+10	; 0x0a
 c84:	b3 85       	ldd	r27, Z+11	; 0x0b
 c86:	c4 81       	ldd	r28, Z+4	; 0x04
 c88:	d5 81       	ldd	r29, Z+5	; 0x05
 c8a:	86 81       	ldd	r24, Z+6	; 0x06
 c8c:	97 81       	ldd	r25, Z+7	; 0x07
 c8e:	9d 83       	std	Y+5, r25	; 0x05
 c90:	8c 83       	std	Y+4, r24	; 0x04
 c92:	c6 81       	ldd	r28, Z+6	; 0x06
 c94:	d7 81       	ldd	r29, Z+7	; 0x07
 c96:	84 81       	ldd	r24, Z+4	; 0x04
 c98:	95 81       	ldd	r25, Z+5	; 0x05
 c9a:	9b 83       	std	Y+3, r25	; 0x03
 c9c:	8a 83       	std	Y+2, r24	; 0x02
 c9e:	11 96       	adiw	r26, 0x01	; 1
 ca0:	8d 91       	ld	r24, X+
 ca2:	9c 91       	ld	r25, X
 ca4:	12 97       	sbiw	r26, 0x02	; 2
 ca6:	9f 01       	movw	r18, r30
 ca8:	2e 5f       	subi	r18, 0xFE	; 254
 caa:	3f 4f       	sbci	r19, 0xFF	; 255
 cac:	82 17       	cp	r24, r18
 cae:	93 07       	cpc	r25, r19
 cb0:	31 f4       	brne	.+12     	; 0xcbe <xTaskResumeAll+0xb4>
 cb2:	86 81       	ldd	r24, Z+6	; 0x06
 cb4:	97 81       	ldd	r25, Z+7	; 0x07
 cb6:	12 96       	adiw	r26, 0x02	; 2
 cb8:	9c 93       	st	X, r25
 cba:	8e 93       	st	-X, r24
 cbc:	11 97       	sbiw	r26, 0x01	; 1
 cbe:	13 86       	std	Z+11, r1	; 0x0b
 cc0:	12 86       	std	Z+10, r1	; 0x0a
 cc2:	8c 91       	ld	r24, X
 cc4:	81 50       	subi	r24, 0x01	; 1
 cc6:	8c 93       	st	X, r24
 cc8:	86 89       	ldd	r24, Z+22	; 0x16
 cca:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <uxTopReadyPriority>
 cce:	98 17       	cp	r25, r24
 cd0:	10 f4       	brcc	.+4      	; 0xcd6 <xTaskResumeAll+0xcc>
 cd2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <uxTopReadyPriority>
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	dc 01       	movw	r26, r24
 cda:	aa 0f       	add	r26, r26
 cdc:	bb 1f       	adc	r27, r27
 cde:	aa 0f       	add	r26, r26
 ce0:	bb 1f       	adc	r27, r27
 ce2:	aa 0f       	add	r26, r26
 ce4:	bb 1f       	adc	r27, r27
 ce6:	8a 0f       	add	r24, r26
 ce8:	9b 1f       	adc	r25, r27
 cea:	dc 01       	movw	r26, r24
 cec:	ae 56       	subi	r26, 0x6E	; 110
 cee:	b9 4f       	sbci	r27, 0xF9	; 249
 cf0:	11 96       	adiw	r26, 0x01	; 1
 cf2:	0d 90       	ld	r0, X+
 cf4:	bc 91       	ld	r27, X
 cf6:	a0 2d       	mov	r26, r0
 cf8:	b5 83       	std	Z+5, r27	; 0x05
 cfa:	a4 83       	std	Z+4, r26	; 0x04
 cfc:	14 96       	adiw	r26, 0x04	; 4
 cfe:	8d 91       	ld	r24, X+
 d00:	9c 91       	ld	r25, X
 d02:	15 97       	sbiw	r26, 0x05	; 5
 d04:	97 83       	std	Z+7, r25	; 0x07
 d06:	86 83       	std	Z+6, r24	; 0x06
 d08:	14 96       	adiw	r26, 0x04	; 4
 d0a:	cd 91       	ld	r28, X+
 d0c:	dc 91       	ld	r29, X
 d0e:	15 97       	sbiw	r26, 0x05	; 5
 d10:	3b 83       	std	Y+3, r19	; 0x03
 d12:	2a 83       	std	Y+2, r18	; 0x02
 d14:	15 96       	adiw	r26, 0x05	; 5
 d16:	3c 93       	st	X, r19
 d18:	2e 93       	st	-X, r18
 d1a:	14 97       	sbiw	r26, 0x04	; 4
 d1c:	a6 89       	ldd	r26, Z+22	; 0x16
 d1e:	b0 e0       	ldi	r27, 0x00	; 0
 d20:	cd 01       	movw	r24, r26
 d22:	88 0f       	add	r24, r24
 d24:	99 1f       	adc	r25, r25
 d26:	88 0f       	add	r24, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	88 0f       	add	r24, r24
 d2c:	99 1f       	adc	r25, r25
 d2e:	a8 0f       	add	r26, r24
 d30:	b9 1f       	adc	r27, r25
 d32:	ae 56       	subi	r26, 0x6E	; 110
 d34:	b9 4f       	sbci	r27, 0xF9	; 249
 d36:	b3 87       	std	Z+11, r27	; 0x0b
 d38:	a2 87       	std	Z+10, r26	; 0x0a
 d3a:	8c 91       	ld	r24, X
 d3c:	8f 5f       	subi	r24, 0xFF	; 255
 d3e:	8c 93       	st	X, r24
 d40:	96 89       	ldd	r25, Z+22	; 0x16
 d42:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <pxCurrentTCB>
 d46:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <pxCurrentTCB+0x1>
 d4a:	56 96       	adiw	r26, 0x16	; 22
 d4c:	8c 91       	ld	r24, X
 d4e:	98 17       	cp	r25, r24
 d50:	30 f0       	brcs	.+12     	; 0xd5e <xTaskResumeAll+0x154>
 d52:	81 e0       	ldi	r24, 0x01	; 1
 d54:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xYieldPending>
 d58:	02 c0       	rjmp	.+4      	; 0xd5e <xTaskResumeAll+0x154>
 d5a:	e0 e0       	ldi	r30, 0x00	; 0
 d5c:	f0 e0       	ldi	r31, 0x00	; 0
 d5e:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <xPendingReadyList>
 d62:	81 11       	cpse	r24, r1
 d64:	65 cf       	rjmp	.-310    	; 0xc30 <xTaskResumeAll+0x26>
 d66:	ef 2b       	or	r30, r31
 d68:	11 f0       	breq	.+4      	; 0xd6e <xTaskResumeAll+0x164>
 d6a:	0e 94 9b 02 	call	0x536	; 0x536 <prvResetNextTaskUnblockTime>
 d6e:	c0 91 62 06 	lds	r28, 0x0662	; 0x800662 <xPendedTicks>
 d72:	d0 91 63 06 	lds	r29, 0x0663	; 0x800663 <xPendedTicks+0x1>
 d76:	20 97       	sbiw	r28, 0x00	; 0
 d78:	69 f0       	breq	.+26     	; 0xd94 <xTaskResumeAll+0x18a>
 d7a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <xTaskIncrementTick>
 d7e:	88 23       	and	r24, r24
 d80:	19 f0       	breq	.+6      	; 0xd88 <xTaskResumeAll+0x17e>
 d82:	81 e0       	ldi	r24, 0x01	; 1
 d84:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xYieldPending>
 d88:	21 97       	sbiw	r28, 0x01	; 1
 d8a:	b9 f7       	brne	.-18     	; 0xd7a <xTaskResumeAll+0x170>
 d8c:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <xPendedTicks+0x1>
 d90:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <xPendedTicks>
 d94:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <xYieldPending>
 d98:	88 23       	and	r24, r24
 d9a:	31 f0       	breq	.+12     	; 0xda8 <xTaskResumeAll+0x19e>
 d9c:	0e 94 a8 01 	call	0x350	; 0x350 <vPortYield>
 da0:	81 e0       	ldi	r24, 0x01	; 1
 da2:	03 c0       	rjmp	.+6      	; 0xdaa <xTaskResumeAll+0x1a0>
 da4:	80 e0       	ldi	r24, 0x00	; 0
 da6:	01 c0       	rjmp	.+2      	; 0xdaa <xTaskResumeAll+0x1a0>
 da8:	80 e0       	ldi	r24, 0x00	; 0
 daa:	0f 90       	pop	r0
 dac:	0f be       	out	0x3f, r0	; 63
 dae:	df 91       	pop	r29
 db0:	cf 91       	pop	r28
 db2:	08 95       	ret

00000db4 <vTaskDelay>:
 db4:	cf 93       	push	r28
 db6:	df 93       	push	r29
 db8:	ec 01       	movw	r28, r24
 dba:	89 2b       	or	r24, r25
 dbc:	49 f0       	breq	.+18     	; 0xdd0 <vTaskDelay+0x1c>
 dbe:	0e 94 e5 04 	call	0x9ca	; 0x9ca <vTaskSuspendAll>
 dc2:	60 e0       	ldi	r22, 0x00	; 0
 dc4:	ce 01       	movw	r24, r28
 dc6:	0e 94 21 04 	call	0x842	; 0x842 <prvAddCurrentTaskToDelayedList>
 dca:	0e 94 05 06 	call	0xc0a	; 0xc0a <xTaskResumeAll>
 dce:	01 c0       	rjmp	.+2      	; 0xdd2 <vTaskDelay+0x1e>
 dd0:	80 e0       	ldi	r24, 0x00	; 0
 dd2:	81 11       	cpse	r24, r1
 dd4:	02 c0       	rjmp	.+4      	; 0xdda <vTaskDelay+0x26>
 dd6:	0e 94 a8 01 	call	0x350	; 0x350 <vPortYield>
 dda:	df 91       	pop	r29
 ddc:	cf 91       	pop	r28
 dde:	08 95       	ret

00000de0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 de0:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
 de4:	88 23       	and	r24, r24
 de6:	21 f0       	breq	.+8      	; 0xdf0 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 de8:	81 e0       	ldi	r24, 0x01	; 1
 dea:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xYieldPending>
 dee:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 df0:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 df4:	20 91 65 06 	lds	r18, 0x0665	; 0x800665 <uxTopReadyPriority>
 df8:	01 c0       	rjmp	.+2      	; 0xdfc <vTaskSwitchContext+0x1c>
 dfa:	21 50       	subi	r18, 0x01	; 1
 dfc:	82 2f       	mov	r24, r18
 dfe:	90 e0       	ldi	r25, 0x00	; 0
 e00:	fc 01       	movw	r30, r24
 e02:	ee 0f       	add	r30, r30
 e04:	ff 1f       	adc	r31, r31
 e06:	ee 0f       	add	r30, r30
 e08:	ff 1f       	adc	r31, r31
 e0a:	ee 0f       	add	r30, r30
 e0c:	ff 1f       	adc	r31, r31
 e0e:	e8 0f       	add	r30, r24
 e10:	f9 1f       	adc	r31, r25
 e12:	ee 56       	subi	r30, 0x6E	; 110
 e14:	f9 4f       	sbci	r31, 0xF9	; 249
 e16:	30 81       	ld	r19, Z
 e18:	33 23       	and	r19, r19
 e1a:	79 f3       	breq	.-34     	; 0xdfa <vTaskSwitchContext+0x1a>
 e1c:	ac 01       	movw	r20, r24
 e1e:	44 0f       	add	r20, r20
 e20:	55 1f       	adc	r21, r21
 e22:	44 0f       	add	r20, r20
 e24:	55 1f       	adc	r21, r21
 e26:	44 0f       	add	r20, r20
 e28:	55 1f       	adc	r21, r21
 e2a:	48 0f       	add	r20, r24
 e2c:	59 1f       	adc	r21, r25
 e2e:	df 01       	movw	r26, r30
 e30:	01 80       	ldd	r0, Z+1	; 0x01
 e32:	f2 81       	ldd	r31, Z+2	; 0x02
 e34:	e0 2d       	mov	r30, r0
 e36:	02 80       	ldd	r0, Z+2	; 0x02
 e38:	f3 81       	ldd	r31, Z+3	; 0x03
 e3a:	e0 2d       	mov	r30, r0
 e3c:	12 96       	adiw	r26, 0x02	; 2
 e3e:	fc 93       	st	X, r31
 e40:	ee 93       	st	-X, r30
 e42:	11 97       	sbiw	r26, 0x01	; 1
 e44:	4b 56       	subi	r20, 0x6B	; 107
 e46:	59 4f       	sbci	r21, 0xF9	; 249
 e48:	e4 17       	cp	r30, r20
 e4a:	f5 07       	cpc	r31, r21
 e4c:	29 f4       	brne	.+10     	; 0xe58 <vTaskSwitchContext+0x78>
 e4e:	42 81       	ldd	r20, Z+2	; 0x02
 e50:	53 81       	ldd	r21, Z+3	; 0x03
 e52:	fd 01       	movw	r30, r26
 e54:	52 83       	std	Z+2, r21	; 0x02
 e56:	41 83       	std	Z+1, r20	; 0x01
 e58:	fc 01       	movw	r30, r24
 e5a:	ee 0f       	add	r30, r30
 e5c:	ff 1f       	adc	r31, r31
 e5e:	ee 0f       	add	r30, r30
 e60:	ff 1f       	adc	r31, r31
 e62:	ee 0f       	add	r30, r30
 e64:	ff 1f       	adc	r31, r31
 e66:	8e 0f       	add	r24, r30
 e68:	9f 1f       	adc	r25, r31
 e6a:	fc 01       	movw	r30, r24
 e6c:	ee 56       	subi	r30, 0x6E	; 110
 e6e:	f9 4f       	sbci	r31, 0xF9	; 249
 e70:	01 80       	ldd	r0, Z+1	; 0x01
 e72:	f2 81       	ldd	r31, Z+2	; 0x02
 e74:	e0 2d       	mov	r30, r0
 e76:	86 81       	ldd	r24, Z+6	; 0x06
 e78:	97 81       	ldd	r25, Z+7	; 0x07
 e7a:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <pxCurrentTCB+0x1>
 e7e:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <pxCurrentTCB>
 e82:	20 93 65 06 	sts	0x0665, r18	; 0x800665 <uxTopReadyPriority>
 e86:	08 95       	ret

00000e88 <_exit>:
 e88:	f8 94       	cli

00000e8a <__stop_program>:
 e8a:	ff cf       	rjmp	.-2      	; 0xe8a <__stop_program>
