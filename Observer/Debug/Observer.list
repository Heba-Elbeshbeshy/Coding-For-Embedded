
Observer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000670  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000804  08000804  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000804  08000804  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000804  08000804  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000804  08000804  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000804  08000804  00010804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000808  08000808  00010808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800080c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000010  0800081c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000054  0800081c  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001cb9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000097e  00000000  00000000  00021cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00022678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00022868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a4c5  00000000  00000000  000229c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000256a  00000000  00000000  0002ce85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00036210  00000000  00000000  0002f3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000655ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004b0  00000000  00000000  00065650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007ec 	.word	0x080007ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080007ec 	.word	0x080007ec

080001d4 <Subscribe>:
#include <stddef.h>

void (*NotifyCallbackPtr[MAX_NUM_CLIENTS])(void);

unsigned char Subscribe(CallbackType CallbackPtr)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	unsigned char index;
	for(index = 0; index < MAX_NUM_CLIENTS; index++)
 80001dc:	2300      	movs	r3, #0
 80001de:	73fb      	strb	r3, [r7, #15]
 80001e0:	e00f      	b.n	8000202 <Subscribe+0x2e>
	{
		if(NotifyCallbackPtr[index] == NULL)
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <Subscribe+0x44>)
 80001e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d106      	bne.n	80001fc <Subscribe+0x28>
		{
			NotifyCallbackPtr[index] = CallbackPtr;
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	4909      	ldr	r1, [pc, #36]	; (8000218 <Subscribe+0x44>)
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			return index;
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	e006      	b.n	800020a <Subscribe+0x36>
	for(index = 0; index < MAX_NUM_CLIENTS; index++)
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	3301      	adds	r3, #1
 8000200:	73fb      	strb	r3, [r7, #15]
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	2b04      	cmp	r3, #4
 8000206:	d9ec      	bls.n	80001e2 <Subscribe+0xe>
		}
	}
	return -1;
 8000208:	23ff      	movs	r3, #255	; 0xff
}
 800020a:	4618      	mov	r0, r3
 800020c:	3714      	adds	r7, #20
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	2000002c 	.word	0x2000002c

0800021c <DataNotifyAllClients>:

void DataNotifyAllClients(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < MAX_NUM_CLIENTS; i++)
 8000222:	2300      	movs	r3, #0
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	e00d      	b.n	8000244 <DataNotifyAllClients+0x28>
	{
		if(NotifyCallbackPtr[i] != NULL)
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <DataNotifyAllClients+0x38>)
 800022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d004      	beq.n	800023e <DataNotifyAllClients+0x22>
		{
			NotifyCallbackPtr[i]();
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	4a07      	ldr	r2, [pc, #28]	; (8000254 <DataNotifyAllClients+0x38>)
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	4798      	blx	r3
	for(i = 0; i < MAX_NUM_CLIENTS; i++)
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	3301      	adds	r3, #1
 8000242:	71fb      	strb	r3, [r7, #7]
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	2b04      	cmp	r3, #4
 8000248:	d9ee      	bls.n	8000228 <DataNotifyAllClients+0xc>
		}
	}
}
 800024a:	bf00      	nop
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	2000002c 	.word	0x2000002c

08000258 <Client1Init>:

unsigned char Client2Index = -1;
unsigned char Notify_Client1 = 0;

void Client1Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Client2Index = Subscribe(Client1Notify);
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <Client1Init+0x18>)
 800025e:	f7ff ffb9 	bl	80001d4 <Subscribe>
 8000262:	4603      	mov	r3, r0
 8000264:	461a      	mov	r2, r3
 8000266:	4b03      	ldr	r3, [pc, #12]	; (8000274 <Client1Init+0x1c>)
 8000268:	701a      	strb	r2, [r3, #0]
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	08000279 	.word	0x08000279
 8000274:	20000000 	.word	0x20000000

08000278 <Client1Notify>:
void Client1Notify(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	Notify_Client1 = 1;
 800027c:	4b03      	ldr	r3, [pc, #12]	; (800028c <Client1Notify+0x14>)
 800027e:	2201      	movs	r2, #1
 8000280:	701a      	strb	r2, [r3, #0]
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	20000040 	.word	0x20000040

08000290 <Client1Action>:
void Client1Action(float data)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	ed87 0a01 	vstr	s0, [r7, #4]
	if(Notify_Client1 == 1)
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <Client1Action+0x2c>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d105      	bne.n	80002ae <Client1Action+0x1e>
	{
		GPIOA->ODR ^=  (1 << 0);
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <Client1Action+0x30>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <Client1Action+0x30>)
 80002a8:	f083 0301 	eor.w	r3, r3, #1
 80002ac:	6153      	str	r3, [r2, #20]
	}
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	20000040 	.word	0x20000040
 80002c0:	40020000 	.word	0x40020000

080002c4 <Client2Init>:

unsigned char Client1Index = -1;
unsigned char Notify_Client2 = 0;

void Client2Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	Client1Index = Subscribe(Client2Notify);
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <Client2Init+0x18>)
 80002ca:	f7ff ff83 	bl	80001d4 <Subscribe>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <Client2Init+0x1c>)
 80002d4:	701a      	strb	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	080002e5 	.word	0x080002e5
 80002e0:	20000001 	.word	0x20000001

080002e4 <Client2Notify>:
void Client2Notify(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	Notify_Client2 = 1;
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <Client2Notify+0x14>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	701a      	strb	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	20000041 	.word	0x20000041

080002fc <Client2Action>:
void Client2Action(float data)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	ed87 0a01 	vstr	s0, [r7, #4]
	if(Notify_Client2 == 1)
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <Client2Action+0x2c>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d105      	bne.n	800031a <Client2Action+0x1e>
	{
		GPIOA->ODR ^=  (1 << 1);
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <Client2Action+0x30>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a06      	ldr	r2, [pc, #24]	; (800032c <Client2Action+0x30>)
 8000314:	f083 0302 	eor.w	r3, r3, #2
 8000318:	6153      	str	r3, [r2, #20]
	}
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	20000041 	.word	0x20000041
 800032c:	40020000 	.word	0x40020000

08000330 <Update>:

float temp;
unsigned char DataUpdated = 0;

unsigned char Update(float data)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	ed87 0a01 	vstr	s0, [r7, #4]
	temp = data;
 800033a:	4a07      	ldr	r2, [pc, #28]	; (8000358 <Update+0x28>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	6013      	str	r3, [r2, #0]
	DataUpdated = 1;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <Update+0x2c>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
	return DataUpdated;
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <Update+0x2c>)
 8000348:	781b      	ldrb	r3, [r3, #0]
}
 800034a:	4618      	mov	r0, r3
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000044 	.word	0x20000044
 800035c:	20000048 	.word	0x20000048

08000360 <Ecall_ManageClientAction>:

void Ecall_ManageClientAction(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	if(DataUpdated == 1)
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <Ecall_ManageClientAction+0x2c>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d10d      	bne.n	8000388 <Ecall_ManageClientAction+0x28>
	{
		Client1Action(temp);
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <Ecall_ManageClientAction+0x30>)
 800036e:	edd3 7a00 	vldr	s15, [r3]
 8000372:	eeb0 0a67 	vmov.f32	s0, s15
 8000376:	f7ff ff8b 	bl	8000290 <Client1Action>
		Client2Action(temp);
 800037a:	4b05      	ldr	r3, [pc, #20]	; (8000390 <Ecall_ManageClientAction+0x30>)
 800037c:	edd3 7a00 	vldr	s15, [r3]
 8000380:	eeb0 0a67 	vmov.f32	s0, s15
 8000384:	f7ff ffba 	bl	80002fc <Client2Action>
	}
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000048 	.word	0x20000048
 8000390:	20000044 	.word	0x20000044

08000394 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	f003 021f 	and.w	r2, r3, #31
 80003a4:	4907      	ldr	r1, [pc, #28]	; (80003c4 <NVIC_EnableIRQ+0x30>)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	095b      	lsrs	r3, r3, #5
 80003ac:	2001      	movs	r0, #1
 80003ae:	fa00 f202 	lsl.w	r2, r0, r2
 80003b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000e100 	.word	0xe000e100

080003c8 <StartTimer>:
#include "stm32f4xx.h"
#include "poller.h"


void StartTimer(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	/*Enable timer 2*/
	RCC->APB1ENR |=(1u<<0);
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <StartTimer+0x48>)
 80003ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003d0:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <StartTimer+0x48>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 1600-1;
 80003d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003dc:	f240 623f 	movw	r2, #1599	; 0x63f
 80003e0:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100;
 80003e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e6:	2264      	movs	r2, #100	; 0x64
 80003e8:	62da      	str	r2, [r3, #44]	; 0x2c

	/*clear timer counter*/
	TIM2->CNT = 0;
 80003ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable  timer*/
	TIM2->CR1 |= (1u<<0);
 80003f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	b29b      	uxth	r3, r3
 8000404:	8013      	strh	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40023800 	.word	0x40023800

08000414 <EnableInterrupt>:
void StopTimer(void)
{
	TIM2->CR1 &= ~(1u<<0);
}
void EnableInterrupt(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	/*Enable timer interrupt*/
	TIM2->DIER |= (1<<0);
 8000418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041c:	899b      	ldrh	r3, [r3, #12]
 800041e:	b29b      	uxth	r3, r3
 8000420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	b29b      	uxth	r3, r3
 800042a:	8193      	strh	r3, [r2, #12]
	/*Enable timer interrupt NVIC*/
	NVIC_EnableIRQ(TIM2_IRQn);
 800042c:	201c      	movs	r0, #28
 800042e:	f7ff ffb1 	bl	8000394 <NVIC_EnableIRQ>

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}

08000436 <CallPollingFunction>:
	/*Enable timer interrupt*/
	TIM2->DIER &= ~(1u<<0);
}

void CallPollingFunction(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	af00      	add	r7, sp, #0
	Poll();
 800043a:	f000 f815 	bl	8000468 <Poll>
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <Get_Data>:


#include <device.h>

float Get_Data(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
	float data = 100.0;
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <Get_Data+0x20>)
 800044c:	607b      	str	r3, [r7, #4]
	return data;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	ee07 3a90 	vmov	s15, r3
}
 8000454:	eeb0 0a67 	vmov.f32	s0, s15
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	42c80000 	.word	0x42c80000

08000468 <Poll>:
int pollingManageClient_counter= 1;
int DataCounter = 0 ;
int ManageClientCounter = 0 ;

void Poll(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	if(polling_enabled)
 800046e:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <Poll+0x88>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d018      	beq.n	80004a8 <Poll+0x40>
	{
		if(!DataCounter)
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <Poll+0x8c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d10e      	bne.n	800049c <Poll+0x34>
		{
			float data ;
			unsigned char dataUpdated;

			data = Get_Data();
 800047e:	f7ff ffe1 	bl	8000444 <Get_Data>
 8000482:	ed87 0a01 	vstr	s0, [r7, #4]
			dataUpdated = Update(data);
 8000486:	ed97 0a01 	vldr	s0, [r7, #4]
 800048a:	f7ff ff51 	bl	8000330 <Update>
 800048e:	4603      	mov	r3, r0
 8000490:	70fb      	strb	r3, [r7, #3]

			if(dataUpdated)
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <Poll+0x34>
			{
				DataNotifyAllClients();
 8000498:	f7ff fec0 	bl	800021c <DataNotifyAllClients>
			}
		}
		if (!ManageClientCounter)
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <Poll+0x90>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d101      	bne.n	80004a8 <Poll+0x40>
		{
			Ecall_ManageClientAction();
 80004a4:	f7ff ff5c 	bl	8000360 <Ecall_ManageClientAction>
		}
	}

	DataCounter++;
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <Poll+0x8c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	3301      	adds	r3, #1
 80004ae:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <Poll+0x8c>)
 80004b0:	6013      	str	r3, [r2, #0]
	ManageClientCounter++;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <Poll+0x90>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	3301      	adds	r3, #1
 80004b8:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <Poll+0x90>)
 80004ba:	6013      	str	r3, [r2, #0]

	DataCounter = DataCounter % pollingData_counter;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <Poll+0x8c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <Poll+0x94>)
 80004c2:	6812      	ldr	r2, [r2, #0]
 80004c4:	fb93 f1f2 	sdiv	r1, r3, r2
 80004c8:	fb01 f202 	mul.w	r2, r1, r2
 80004cc:	1a9b      	subs	r3, r3, r2
 80004ce:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <Poll+0x8c>)
 80004d0:	6013      	str	r3, [r2, #0]
	ManageClientCounter = ManageClientCounter % pollingManageClient_counter;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <Poll+0x90>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <Poll+0x98>)
 80004d8:	6812      	ldr	r2, [r2, #0]
 80004da:	fb93 f1f2 	sdiv	r1, r3, r2
 80004de:	fb01 f202 	mul.w	r2, r1, r2
 80004e2:	1a9b      	subs	r3, r3, r2
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <Poll+0x90>)
 80004e6:	6013      	str	r3, [r2, #0]
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000004 	.word	0x20000004
 80004f4:	2000004c 	.word	0x2000004c
 80004f8:	20000050 	.word	0x20000050
 80004fc:	20000008 	.word	0x20000008
 8000500:	2000000c 	.word	0x2000000c

08000504 <StartPolling>:

void StartPolling(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	polling_enabled=1;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <StartPolling+0x14>)
 800050a:	2201      	movs	r2, #1
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	20000004 	.word	0x20000004

0800051c <SetPollingTime>:
{
	polling_enabled=0;
}

void SetPollingTime(int pollingData_time, int pollingManageClient_time )
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	pollingData_counter = pollingData_time/100;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <SetPollingTime+0x3c>)
 800052a:	fb82 1203 	smull	r1, r2, r2, r3
 800052e:	1152      	asrs	r2, r2, #5
 8000530:	17db      	asrs	r3, r3, #31
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	4a09      	ldr	r2, [pc, #36]	; (800055c <SetPollingTime+0x40>)
 8000536:	6013      	str	r3, [r2, #0]
	pollingManageClient_counter = pollingManageClient_time/100;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	4a07      	ldr	r2, [pc, #28]	; (8000558 <SetPollingTime+0x3c>)
 800053c:	fb82 1203 	smull	r1, r2, r2, r3
 8000540:	1152      	asrs	r2, r2, #5
 8000542:	17db      	asrs	r3, r3, #31
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	4a06      	ldr	r2, [pc, #24]	; (8000560 <SetPollingTime+0x44>)
 8000548:	6013      	str	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	51eb851f 	.word	0x51eb851f
 800055c:	20000008 	.word	0x20000008
 8000560:	2000000c 	.word	0x2000000c

08000564 <main>:
#include <ObserverClient2.h>
#include "PollerTimer.h"
#include "poller.h"

int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	/*initialize pin 0,1 portA as output*/
	RCC->AHB1ENR |=  (1 << 0);
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <main+0x64>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <main+0x64>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |=  (1 << 0);
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <main+0x68>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a14      	ldr	r2, [pc, #80]	; (80005cc <main+0x68>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 1);
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <main+0x68>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a11      	ldr	r2, [pc, #68]	; (80005cc <main+0x68>)
 8000586:	f023 0302 	bic.w	r3, r3, #2
 800058a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1 << 2);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0x68>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <main+0x68>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 3);
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <main+0x68>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <main+0x68>)
 800059e:	f023 0308 	bic.w	r3, r3, #8
 80005a2:	6013      	str	r3, [r2, #0]

	Client1Init();
 80005a4:	f7ff fe58 	bl	8000258 <Client1Init>
	Client2Init();
 80005a8:	f7ff fe8c 	bl	80002c4 <Client2Init>
	StartTimer();
 80005ac:	f7ff ff0c 	bl	80003c8 <StartTimer>
	EnableInterrupt();
 80005b0:	f7ff ff30 	bl	8000414 <EnableInterrupt>
	SetPollingTime(500 , 800);
 80005b4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80005b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005bc:	f7ff ffae 	bl	800051c <SetPollingTime>
	StartPolling();
 80005c0:	f7ff ffa0 	bl	8000504 <StartPolling>

	while(1)
 80005c4:	e7fe      	b.n	80005c4 <main+0x60>
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40020000 	.word	0x40020000

080005d0 <TIM2_IRQHandler>:
	{
	}
}

void TIM2_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	TIM2->SR &=~(1<<0);
 80005d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005d8:	8a1b      	ldrh	r3, [r3, #16]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e0:	f023 0301 	bic.w	r3, r3, #1
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	8213      	strh	r3, [r2, #16]
	CallPollingFunction();
 80005e8:	f7ff ff25 	bl	8000436 <CallPollingFunction>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <SystemInit+0x60>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <SystemInit+0x60>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <SystemInit+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <SystemInit+0x64>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <SystemInit+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <SystemInit+0x64>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <SystemInit+0x64>)
 800061c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000624:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <SystemInit+0x64>)
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <SystemInit+0x68>)
 800062a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <SystemInit+0x64>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <SystemInit+0x64>)
 8000632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000636:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <SystemInit+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800063e:	f000 f80d 	bl	800065c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <SystemInit+0x60>)
 8000644:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000648:	609a      	str	r2, [r3, #8]
#endif
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	40023800 	.word	0x40023800
 8000658:	24003010 	.word	0x24003010

0800065c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <SetSysClock+0xe4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a34      	ldr	r2, [pc, #208]	; (8000740 <SetSysClock+0xe4>)
 8000670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000674:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <SetSysClock+0xe4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800067e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3301      	adds	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d103      	bne.n	8000694 <SetSysClock+0x38>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000692:	d1f0      	bne.n	8000676 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000694:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <SetSysClock+0xe4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80006a0:	2301      	movs	r3, #1
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	e001      	b.n	80006aa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d140      	bne.n	8000732 <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <SetSysClock+0xe4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a22      	ldr	r2, [pc, #136]	; (8000740 <SetSysClock+0xe4>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <SetSysClock+0xe8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a20      	ldr	r2, [pc, #128]	; (8000744 <SetSysClock+0xe8>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <SetSysClock+0xe4>)
 80006ca:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <SetSysClock+0xe4>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
#endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */

#if defined(STM32F401xx) || defined(STM32F413_423xx)
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <SetSysClock+0xe4>)
 80006d2:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <SetSysClock+0xe4>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <SetSysClock+0xe4>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	4a18      	ldr	r2, [pc, #96]	; (8000740 <SetSysClock+0xe4>)
 80006de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006e2:	6093      	str	r3, [r2, #8]
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <SetSysClock+0xe4>)
 80006e6:	4a18      	ldr	r2, [pc, #96]	; (8000748 <SetSysClock+0xec>)
 80006e8:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <SetSysClock+0xe4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <SetSysClock+0xe4>)
 80006f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006f4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006f6:	bf00      	nop
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <SetSysClock+0xe4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f9      	beq.n	80006f8 <SetSysClock+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
#endif /* STM32F413_423xx */

#if defined(STM32F401xx)
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <SetSysClock+0xf0>)
 8000706:	f240 7202 	movw	r2, #1794	; 0x702
 800070a:	601a      	str	r2, [r3, #0]
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <SetSysClock+0xe4>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <SetSysClock+0xe4>)
 8000712:	f023 0303 	bic.w	r3, r3, #3
 8000716:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <SetSysClock+0xe4>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4a08      	ldr	r2, [pc, #32]	; (8000740 <SetSysClock+0xe4>)
 800071e:	f043 0302 	orr.w	r3, r3, #2
 8000722:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000724:	bf00      	nop
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <SetSysClock+0xe4>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	f003 030c 	and.w	r3, r3, #12
 800072e:	2b08      	cmp	r3, #8
 8000730:	d1f9      	bne.n	8000726 <SetSysClock+0xca>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000
 8000748:	07415419 	.word	0x07415419
 800074c:	40023c00 	.word	0x40023c00

08000750 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000752:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x6>)
  ldr r1, =_edata
 8000756:	490e      	ldr	r1, [pc, #56]	; (8000790 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <LoopForever+0xe>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <LoopForever+0x12>)
  ldr r4, =_ebss
 800076c:	4c0b      	ldr	r4, [pc, #44]	; (800079c <LoopForever+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800077a:	f7ff ff39 	bl	80005f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800077e:	f000 f811 	bl	80007a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000782:	f7ff feef 	bl	8000564 <main>

08000786 <LoopForever>:

LoopForever:
    b LoopForever
 8000786:	e7fe      	b.n	8000786 <LoopForever>
  ldr   r0, =_estack
 8000788:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000794:	0800080c 	.word	0x0800080c
  ldr r2, =_sbss
 8000798:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800079c:	20000054 	.word	0x20000054

080007a0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC_IRQHandler>
	...

080007a4 <__libc_init_array>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	4d0d      	ldr	r5, [pc, #52]	; (80007dc <__libc_init_array+0x38>)
 80007a8:	4c0d      	ldr	r4, [pc, #52]	; (80007e0 <__libc_init_array+0x3c>)
 80007aa:	1b64      	subs	r4, r4, r5
 80007ac:	10a4      	asrs	r4, r4, #2
 80007ae:	2600      	movs	r6, #0
 80007b0:	42a6      	cmp	r6, r4
 80007b2:	d109      	bne.n	80007c8 <__libc_init_array+0x24>
 80007b4:	4d0b      	ldr	r5, [pc, #44]	; (80007e4 <__libc_init_array+0x40>)
 80007b6:	4c0c      	ldr	r4, [pc, #48]	; (80007e8 <__libc_init_array+0x44>)
 80007b8:	f000 f818 	bl	80007ec <_init>
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	10a4      	asrs	r4, r4, #2
 80007c0:	2600      	movs	r6, #0
 80007c2:	42a6      	cmp	r6, r4
 80007c4:	d105      	bne.n	80007d2 <__libc_init_array+0x2e>
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007cc:	4798      	blx	r3
 80007ce:	3601      	adds	r6, #1
 80007d0:	e7ee      	b.n	80007b0 <__libc_init_array+0xc>
 80007d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d6:	4798      	blx	r3
 80007d8:	3601      	adds	r6, #1
 80007da:	e7f2      	b.n	80007c2 <__libc_init_array+0x1e>
 80007dc:	08000804 	.word	0x08000804
 80007e0:	08000804 	.word	0x08000804
 80007e4:	08000804 	.word	0x08000804
 80007e8:	08000808 	.word	0x08000808

080007ec <_init>:
 80007ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ee:	bf00      	nop
 80007f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007f2:	bc08      	pop	{r3}
 80007f4:	469e      	mov	lr, r3
 80007f6:	4770      	bx	lr

080007f8 <_fini>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	bf00      	nop
 80007fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fe:	bc08      	pop	{r3}
 8000800:	469e      	mov	lr, r3
 8000802:	4770      	bx	lr
