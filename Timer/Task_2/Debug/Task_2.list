
Task_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000558  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006ec  080006ec  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006ec  080006ec  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080006ec  080006ec  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006ec  080006ec  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006ec  080006ec  000106ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006f0  080006f0  000106f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080006f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000028  0800071c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  0800071c  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c24  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000041f  00000000  00000000  00020c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  000210a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00021208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd91  00000000  00000000  00021318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a53  00000000  00000000  0002f0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fb1e  00000000  00000000  0002fafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007f61a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003f4  00000000  00000000  0007f670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006d4 	.word	0x080006d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	080006d4 	.word	0x080006d4

080001d4 <GPIO_EnableClock>:

unsigned int *LOOKUP[2][5] =
{{GPIOA_MODER, GPIOA_OTYPER, GPIOA_PUPDR, GPIOA_IDR, GPIOA_ODR},
 {GPIOB_MODER, GPIOB_OTYPER, GPIOB_PUPDR,  GPIOB_IDR, GPIOB_ODR}};

void GPIO_EnableClock(uint8_t PortID) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
     *RCC_AHB1ENR |= (0x01 << PortID);
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <GPIO_EnableClock+0x2c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	79fa      	ldrb	r2, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <GPIO_EnableClock+0x2c>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40023830 	.word	0x40023830

08000204 <GPIO_Init>:

void GPIO_Init(uint8_t PortID, uint8_t PinNum, uint8_t PinMode,
               uint8_t DefaultState) {
 8000204:	b490      	push	{r4, r7}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	4604      	mov	r4, r0
 800020c:	4608      	mov	r0, r1
 800020e:	4611      	mov	r1, r2
 8000210:	461a      	mov	r2, r3
 8000212:	4623      	mov	r3, r4
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	4603      	mov	r3, r0
 8000218:	71bb      	strb	r3, [r7, #6]
 800021a:	460b      	mov	r3, r1
 800021c:	717b      	strb	r3, [r7, #5]
 800021e:	4613      	mov	r3, r2
 8000220:	713b      	strb	r3, [r7, #4]
               
      *LOOKUP[PortID][0] &= ~(0x03 << 2 * PinNum);
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	4956      	ldr	r1, [pc, #344]	; (8000380 <GPIO_Init+0x17c>)
 8000226:	4613      	mov	r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	4413      	add	r3, r2
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	440b      	add	r3, r1
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	6819      	ldr	r1, [r3, #0]
 8000234:	79bb      	ldrb	r3, [r7, #6]
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	2203      	movs	r2, #3
 800023a:	fa02 f303 	lsl.w	r3, r2, r3
 800023e:	43db      	mvns	r3, r3
 8000240:	461c      	mov	r4, r3
 8000242:	79fa      	ldrb	r2, [r7, #7]
 8000244:	484e      	ldr	r0, [pc, #312]	; (8000380 <GPIO_Init+0x17c>)
 8000246:	4613      	mov	r3, r2
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	4413      	add	r3, r2
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	4403      	add	r3, r0
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	ea01 0204 	and.w	r2, r1, r4
 8000256:	601a      	str	r2, [r3, #0]
      *LOOKUP[PortID][0] |= PinMode << 2 * PinNum;
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	4949      	ldr	r1, [pc, #292]	; (8000380 <GPIO_Init+0x17c>)
 800025c:	4613      	mov	r3, r2
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	4413      	add	r3, r2
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	440b      	add	r3, r1
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	6819      	ldr	r1, [r3, #0]
 800026a:	797a      	ldrb	r2, [r7, #5]
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	fa02 f303 	lsl.w	r3, r2, r3
 8000274:	461c      	mov	r4, r3
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	4841      	ldr	r0, [pc, #260]	; (8000380 <GPIO_Init+0x17c>)
 800027a:	4613      	mov	r3, r2
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4413      	add	r3, r2
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	4403      	add	r3, r0
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	ea41 0204 	orr.w	r2, r1, r4
 800028a:	601a      	str	r2, [r3, #0]

      *LOOKUP[PortID][1] &= ~(1 << PinNum);
 800028c:	79fa      	ldrb	r2, [r7, #7]
 800028e:	493c      	ldr	r1, [pc, #240]	; (8000380 <GPIO_Init+0x17c>)
 8000290:	4613      	mov	r3, r2
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	4413      	add	r3, r2
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	440b      	add	r3, r1
 800029a:	3304      	adds	r3, #4
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6819      	ldr	r1, [r3, #0]
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	2201      	movs	r2, #1
 80002a4:	fa02 f303 	lsl.w	r3, r2, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	461c      	mov	r4, r3
 80002ac:	79fa      	ldrb	r2, [r7, #7]
 80002ae:	4834      	ldr	r0, [pc, #208]	; (8000380 <GPIO_Init+0x17c>)
 80002b0:	4613      	mov	r3, r2
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	4413      	add	r3, r2
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	4403      	add	r3, r0
 80002ba:	3304      	adds	r3, #4
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	ea01 0204 	and.w	r2, r1, r4
 80002c2:	601a      	str	r2, [r3, #0]
      *LOOKUP[PortID][1] |= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 80002c4:	79fa      	ldrb	r2, [r7, #7]
 80002c6:	492e      	ldr	r1, [pc, #184]	; (8000380 <GPIO_Init+0x17c>)
 80002c8:	4613      	mov	r3, r2
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	4413      	add	r3, r2
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	440b      	add	r3, r1
 80002d2:	3304      	adds	r3, #4
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6819      	ldr	r1, [r3, #0]
 80002d8:	793b      	ldrb	r3, [r7, #4]
 80002da:	f003 0201 	and.w	r2, r3, #1
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	461c      	mov	r4, r3
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	4825      	ldr	r0, [pc, #148]	; (8000380 <GPIO_Init+0x17c>)
 80002ea:	4613      	mov	r3, r2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4403      	add	r3, r0
 80002f4:	3304      	adds	r3, #4
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	ea41 0204 	orr.w	r2, r1, r4
 80002fc:	601a      	str	r2, [r3, #0]

      *LOOKUP[PortID][2] &= ~(0x03 << 2 * PinNum);
 80002fe:	79fa      	ldrb	r2, [r7, #7]
 8000300:	491f      	ldr	r1, [pc, #124]	; (8000380 <GPIO_Init+0x17c>)
 8000302:	4613      	mov	r3, r2
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	4413      	add	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	440b      	add	r3, r1
 800030c:	3308      	adds	r3, #8
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	6819      	ldr	r1, [r3, #0]
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	2203      	movs	r2, #3
 8000318:	fa02 f303 	lsl.w	r3, r2, r3
 800031c:	43db      	mvns	r3, r3
 800031e:	461c      	mov	r4, r3
 8000320:	79fa      	ldrb	r2, [r7, #7]
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <GPIO_Init+0x17c>)
 8000324:	4613      	mov	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4413      	add	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	4403      	add	r3, r0
 800032e:	3308      	adds	r3, #8
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	ea01 0204 	and.w	r2, r1, r4
 8000336:	601a      	str	r2, [r3, #0]
      *LOOKUP[PortID][2] |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum); 
 8000338:	79fa      	ldrb	r2, [r7, #7]
 800033a:	4911      	ldr	r1, [pc, #68]	; (8000380 <GPIO_Init+0x17c>)
 800033c:	4613      	mov	r3, r2
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	440b      	add	r3, r1
 8000346:	3308      	adds	r3, #8
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	6819      	ldr	r1, [r3, #0]
 800034c:	793b      	ldrb	r3, [r7, #4]
 800034e:	105b      	asrs	r3, r3, #1
 8000350:	f003 0203 	and.w	r2, r3, #3
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	fa02 f303 	lsl.w	r3, r2, r3
 800035c:	461c      	mov	r4, r3
 800035e:	79fa      	ldrb	r2, [r7, #7]
 8000360:	4807      	ldr	r0, [pc, #28]	; (8000380 <GPIO_Init+0x17c>)
 8000362:	4613      	mov	r3, r2
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	4413      	add	r3, r2
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	4403      	add	r3, r0
 800036c:	3308      	adds	r3, #8
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	ea41 0204 	orr.w	r2, r1, r4
 8000374:	601a      	str	r2, [r3, #0]
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bc90      	pop	{r4, r7}
 800037e:	4770      	bx	lr
 8000380:	20000000 	.word	0x20000000

08000384 <RCC_APB1ENR>:

#include "GPTIM.h"
#include "main.h"


uint32_t *RCC_APB1ENR(void) { return (uint32_t *)Peripheral_REG((uint32_t)0x40023800, (uint32_t)0x40);}
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
 8000388:	2140      	movs	r1, #64	; 0x40
 800038a:	4803      	ldr	r0, [pc, #12]	; (8000398 <RCC_APB1ENR+0x14>)
 800038c:	f000 f902 	bl	8000594 <Peripheral_REG>
 8000390:	4603      	mov	r3, r0
 8000392:	4618      	mov	r0, r3
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800

0800039c <TIMx_CR1>:

uint32_t *TIMx_CR1(uint8_t x)  { return (uint32_t *)Peripheral_REG( ( (uint32_t)0x40000000 + ((uint32_t)0x400 * (uint32_t)(x)) ) , (uint32_t)(0x00) ); }
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80003ac:	029b      	lsls	r3, r3, #10
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f8ef 	bl	8000594 <Peripheral_REG>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4618      	mov	r0, r3
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <TIMx_DIER>:
uint32_t *TIMx_DIER(uint8_t x) { return (uint32_t *)Peripheral_REG( ( (uint32_t)0x40000000 + ((uint32_t)0x400 * (uint32_t)(x)) ) , (uint32_t)(0x0C) ); }
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80003d0:	029b      	lsls	r3, r3, #10
 80003d2:	210c      	movs	r1, #12
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f8dd 	bl	8000594 <Peripheral_REG>
 80003da:	4603      	mov	r3, r0
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <TIMx_PSC>:
uint32_t *TIMx_SR(uint8_t x)   { return (uint32_t *)Peripheral_REG( ( (uint32_t)0x40000000 + ((uint32_t)0x400 * (uint32_t)(x)) ) , (uint32_t)(0x10) ); }
uint32_t *TIMx_EGR(uint8_t x)  { return (uint32_t *)Peripheral_REG( ( (uint32_t)0x40000000 + ((uint32_t)0x400 * (uint32_t)(x)) ) , (uint32_t)(0x14) ); }
uint32_t *TIMx_CNT(uint8_t x)  { return (uint32_t *)Peripheral_REG( ( (uint32_t)0x40000000 + ((uint32_t)0x400 * (uint32_t)(x)) ) , (uint32_t)(0x24) ); }
uint32_t *TIMx_PSC(uint8_t x)  { return (uint32_t *)Peripheral_REG( ( (uint32_t)0x40000000 + ((uint32_t)0x400 * (uint32_t)(x)) ) , (uint32_t)(0x28) ); }
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80003f4:	029b      	lsls	r3, r3, #10
 80003f6:	2128      	movs	r1, #40	; 0x28
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f8cb 	bl	8000594 <Peripheral_REG>
 80003fe:	4603      	mov	r3, r0
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <TIMx_ARR>:
uint32_t *TIMx_ARR(uint8_t x)  { return (uint32_t *)Peripheral_REG( ( (uint32_t)0x40000000 + ((uint32_t)0x400 * (uint32_t)(x)) ) , (uint32_t)(0x2C) ); }
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8000418:	029b      	lsls	r3, r3, #10
 800041a:	212c      	movs	r1, #44	; 0x2c
 800041c:	4618      	mov	r0, r3
 800041e:	f000 f8b9 	bl	8000594 <Peripheral_REG>
 8000422:	4603      	mov	r3, r0
 8000424:	4618      	mov	r0, r3
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <TIM_EnableClock>:

void TIM_EnableClock(uint8_t Id)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
	*RCC_APB1ENR() |= ((uint32_t)0x01 << (Id - (uint8_t)2));
 8000436:	f7ff ffa5 	bl	8000384 <RCC_APB1ENR>
 800043a:	4603      	mov	r3, r0
 800043c:	6819      	ldr	r1, [r3, #0]
 800043e:	79fa      	ldrb	r2, [r7, #7]
 8000440:	3a02      	subs	r2, #2
 8000442:	2001      	movs	r0, #1
 8000444:	fa00 f202 	lsl.w	r2, r0, r2
 8000448:	430a      	orrs	r2, r1
 800044a:	601a      	str	r2, [r3, #0]
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <TIM_Init>:

void TIM_Init(uint8_t Id, uint8_t CounterMode, uint32_t CounterValue, uint16_t Prescaler)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	603a      	str	r2, [r7, #0]
 800045c:	461a      	mov	r2, r3
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
 8000462:	460b      	mov	r3, r1
 8000464:	71bb      	strb	r3, [r7, #6]
 8000466:	4613      	mov	r3, r2
 8000468:	80bb      	strh	r3, [r7, #4]
    *TIMx_CR1(Id - (uint8_t)2) |= ((uint32_t)1u << 7);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	3b02      	subs	r3, #2
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ff93 	bl	800039c <TIMx_CR1>
 8000476:	4603      	mov	r3, r0
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800047e:	601a      	str	r2, [r3, #0]
    *TIMx_CR1(Id - (uint8_t)2) |= ((uint32_t)CounterMode << 4);
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	3b02      	subs	r3, #2
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff88 	bl	800039c <TIMx_CR1>
 800048c:	4603      	mov	r3, r0
 800048e:	6819      	ldr	r1, [r3, #0]
 8000490:	79ba      	ldrb	r2, [r7, #6]
 8000492:	0112      	lsls	r2, r2, #4
 8000494:	430a      	orrs	r2, r1
 8000496:	601a      	str	r2, [r3, #0]
    *TIMx_PSC(Id - (uint8_t)2)  = Prescaler;
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	3b02      	subs	r3, #2
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ffa0 	bl	80003e4 <TIMx_PSC>
 80004a4:	4602      	mov	r2, r0
 80004a6:	88bb      	ldrh	r3, [r7, #4]
 80004a8:	6013      	str	r3, [r2, #0]
    *TIMx_ARR(Id - (uint8_t)2)  = CounterValue;
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	3b02      	subs	r3, #2
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ffa9 	bl	8000408 <TIMx_ARR>
 80004b6:	4602      	mov	r2, r0
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <TIM_Start>:

void TIM_Start(uint8_t Id)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	*TIMx_DIER(Id - (uint8_t)2) |= ((uint32_t)0x01u << 0);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	3b02      	subs	r3, #2
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ff73 	bl	80003c0 <TIMx_DIER>
 80004da:	4603      	mov	r3, r0
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	f042 0201 	orr.w	r2, r2, #1
 80004e2:	601a      	str	r2, [r3, #0]
	*TIMx_CR1(Id - (uint8_t)2)  |= ((uint32_t)0x01u << 0);
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	3b02      	subs	r3, #2
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff56 	bl	800039c <TIMx_CR1>
 80004f0:	4603      	mov	r3, r0
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	f042 0201 	orr.w	r2, r2, #1
 80004f8:	601a      	str	r2, [r3, #0]
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <TIM_CheckFlag>:
	*TIMx_DIER(Id - (uint8_t)2) &= ~((uint32_t)0x01u << 0);

}

uint8_t TIM_CheckFlag(uint8_t Id, uint8_t Flag)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b082      	sub	sp, #8
 8000506:	af00      	add	r7, sp, #0
 8000508:	4603      	mov	r3, r0
 800050a:	460a      	mov	r2, r1
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	4613      	mov	r3, r2
 8000510:	71bb      	strb	r3, [r7, #6]
	return (uint8_t)(*TIMx_CR1(Id - (uint8_t)2) & ((uint32_t)1u << Flag));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	3b02      	subs	r3, #2
 8000516:	b2db      	uxtb	r3, r3
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff3f 	bl	800039c <TIMx_CR1>
 800051e:	4603      	mov	r3, r0
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	b2da      	uxtb	r2, r3
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	2101      	movs	r1, #1
 8000528:	fa01 f303 	lsl.w	r3, r1, r3
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4013      	ands	r3, r2
 8000530:	b2db      	uxtb	r3, r3
}
 8000532:	4618      	mov	r0, r3
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
	TIM2_Callout();
 800053e:	f000 f855 	bl	80005ec <TIM2_Callout>
	*TIMx_CR1((uint8_t)0) = (uint32_t)0x0000u; /* TIM2 */
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ff2a 	bl	800039c <TIMx_CR1>
 8000548:	4603      	mov	r3, r0
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <NVIC_ISER0>:
 *      Author: Heba Elbeshbeshy
 */

#include "NVIC.h"

uint32_t *NVIC_ISER0() {return (uint32_t *)Peripheral_REG((uint32_t)0xE000E100u, (uint32_t)0x00u);}
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
 8000558:	2100      	movs	r1, #0
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <NVIC_ISER0+0x14>)
 800055c:	f000 f81a 	bl	8000594 <Peripheral_REG>
 8000560:	4603      	mov	r3, r0
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	e000e100 	.word	0xe000e100

0800056c <NVIC_EnableTimerInterrupt>:

void NVIC_EnableTimerInterrupt(uint8_t TIM)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	*NVIC_ISER0() |= ((uint32_t)0x01 << ((uint32_t)26 + (uint32_t)TIM));
 8000576:	f7ff ffed 	bl	8000554 <NVIC_ISER0>
 800057a:	4603      	mov	r3, r0
 800057c:	6819      	ldr	r1, [r3, #0]
 800057e:	79fa      	ldrb	r2, [r7, #7]
 8000580:	321a      	adds	r2, #26
 8000582:	2001      	movs	r0, #1
 8000584:	fa00 f202 	lsl.w	r2, r0, r2
 8000588:	430a      	orrs	r2, r1
 800058a:	601a      	str	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <Peripheral_REG>:
#include "NVIC.h"
#include "GPTIM.h"
#include "GPIO.h"
#include "main.h"

uint32_t Peripheral_REG(uint32_t PORT_ID, uint32_t REG_ID) { return (PORT_ID + REG_ID); }
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <main>:

int32_t main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    GPIO_EnableClock((uint8_t)0);  /* Enable GPIOA */
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff fe0d 	bl	80001d4 <GPIO_EnableClock>
    TIM_EnableClock((uint8_t)2);  /* Enable TIM2 */
 80005ba:	2002      	movs	r0, #2
 80005bc:	f7ff ff36 	bl	800042c <TIM_EnableClock>

    GPIO_Init((uint8_t)0, (uint8_t)1, OUTPUT, PUSH_PULL);  /* Led */
 80005c0:	2300      	movs	r3, #0
 80005c2:	2201      	movs	r2, #1
 80005c4:	2101      	movs	r1, #1
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff fe1c 	bl	8000204 <GPIO_Init>
    TIM_Init((uint8_t)2, DOWNCOUNTER, (uint32_t)1000,  (uint16_t)15999);
 80005cc:	f643 637f 	movw	r3, #15999	; 0x3e7f
 80005d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d4:	2101      	movs	r1, #1
 80005d6:	2002      	movs	r0, #2
 80005d8:	f7ff ff3c 	bl	8000454 <TIM_Init>

    NVIC_EnableTimerInterrupt((uint8_t)2);
 80005dc:	2002      	movs	r0, #2
 80005de:	f7ff ffc5 	bl	800056c <NVIC_EnableTimerInterrupt>
	TIM_Start((uint8_t)2);
 80005e2:	2002      	movs	r0, #2
 80005e4:	f7ff ff6e 	bl	80004c4 <TIM_Start>

    while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x38>
	...

080005ec <TIM2_Callout>:

    return 0;
}

void TIM2_Callout(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	if(TIM_CheckFlag((uint8_t)2, UIF))
 80005f0:	2100      	movs	r1, #0
 80005f2:	2002      	movs	r0, #2
 80005f4:	f7ff ff85 	bl	8000502 <TIM_CheckFlag>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d005      	beq.n	800060a <TIM2_Callout+0x1e>
	{
		*GPIOA_ODR ^= (uint32_t)1u << 1;  /* Toggle Led */
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <TIM2_Callout+0x24>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a03      	ldr	r2, [pc, #12]	; (8000610 <TIM2_Callout+0x24>)
 8000604:	f083 0302 	eor.w	r3, r3, #2
 8000608:	6013      	str	r3, [r2, #0]
	}
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40020014 	.word	0x40020014

08000614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <SystemInit+0x20>)
 800061a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <SystemInit+0x20>)
 8000620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000670 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800063e:	490e      	ldr	r1, [pc, #56]	; (8000678 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000654:	4c0b      	ldr	r4, [pc, #44]	; (8000684 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000662:	f7ff ffd7 	bl	8000614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000666:	f000 f811 	bl	800068c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800066a:	f7ff ffa1 	bl	80005b0 <main>
  bx  lr    
 800066e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000670:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800067c:	080006f4 	.word	0x080006f4
  ldr r2, =_sbss
 8000680:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000684:	20000044 	.word	0x20000044

08000688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC_IRQHandler>
	...

0800068c <__libc_init_array>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	4d0d      	ldr	r5, [pc, #52]	; (80006c4 <__libc_init_array+0x38>)
 8000690:	4c0d      	ldr	r4, [pc, #52]	; (80006c8 <__libc_init_array+0x3c>)
 8000692:	1b64      	subs	r4, r4, r5
 8000694:	10a4      	asrs	r4, r4, #2
 8000696:	2600      	movs	r6, #0
 8000698:	42a6      	cmp	r6, r4
 800069a:	d109      	bne.n	80006b0 <__libc_init_array+0x24>
 800069c:	4d0b      	ldr	r5, [pc, #44]	; (80006cc <__libc_init_array+0x40>)
 800069e:	4c0c      	ldr	r4, [pc, #48]	; (80006d0 <__libc_init_array+0x44>)
 80006a0:	f000 f818 	bl	80006d4 <_init>
 80006a4:	1b64      	subs	r4, r4, r5
 80006a6:	10a4      	asrs	r4, r4, #2
 80006a8:	2600      	movs	r6, #0
 80006aa:	42a6      	cmp	r6, r4
 80006ac:	d105      	bne.n	80006ba <__libc_init_array+0x2e>
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b4:	4798      	blx	r3
 80006b6:	3601      	adds	r6, #1
 80006b8:	e7ee      	b.n	8000698 <__libc_init_array+0xc>
 80006ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80006be:	4798      	blx	r3
 80006c0:	3601      	adds	r6, #1
 80006c2:	e7f2      	b.n	80006aa <__libc_init_array+0x1e>
 80006c4:	080006ec 	.word	0x080006ec
 80006c8:	080006ec 	.word	0x080006ec
 80006cc:	080006ec 	.word	0x080006ec
 80006d0:	080006f0 	.word	0x080006f0

080006d4 <_init>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr

080006e0 <_fini>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	bf00      	nop
 80006e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e6:	bc08      	pop	{r3}
 80006e8:	469e      	mov	lr, r3
 80006ea:	4770      	bx	lr
